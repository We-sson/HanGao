&ACCESS RVO
&REL 481
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM DISKPATH = KRC:\R1\KRL_HanGao\HG
DEF Glode_HanGao( )

;# DATE:2021-1-4



END


GLOBAL DEF Vision_Results_Pos(Vision_PATH:IN,Result_Pos:IN,POS_Offset:OUT)
DECL E6POS POS_Offset,Result_Pos,Offset,Error_Offset,Result_Pos_Inv
DECL Vision_PATH_Enum Vision_PATH
DECL INT Result_ID,OPFFSET
DECL CHAR POS_Sting[1024],Message_Show[1024]
DECL State_t _State
DECL VAR_STATE VarT

Message_Show[]=" "
OPFFSET=0
Offset=$NULLFRAME
Error_Offset=$NULLFRAME

IF Vision_Type ==#Vision_Run THEN


VarT=VARSTATE("POS_Offset")
SWITCH VarT

CASE #DECLARED

RETURN

CASE #INITIALIZED

;Result_Pos_Inv=Inv_Pos(Result_Pos)

Error_Offset=Inv_Pos(Result_Pos):Pos_Offset
;Halt

;Offset.X=Error_Offset.X-POS_Offset.X
;Offset.Y=Error_Offset.Y-POS_Offset.Y
;Offset.Z=Error_Offset.z-POS_Offset.Z
;Offset.A=Error_Offset.A-POS_Offset.A
;Offset.B=Error_Offset.B-POS_Offset.B
;Offset.C=Error_Offset.C-POS_Offset.C




SWRITE( Message_Show[] , _State , OPFFSET ,"Vision Find  Offset: X:%7.3F,Y:%7.3F,Z:%7.3F,A:%7.3F,B:%7.3F,C:%7.3F Translation Max:%7.3F,Rotation Max:%7.3F" ,Error_Offset.X,Error_Offset.Y,Error_Offset.Z,Error_Offset.A,Error_Offset.B,Error_Offset.C, Vision_Trans_Max_Offset ,Vision_Rota_Max_Offset ) 

if (ABS(Error_Offset.X)<Vision_Trans_Max_Offset) AND (ABS(Error_Offset.Y)<Vision_Trans_Max_Offset) AND (ABS(Error_Offset.Z)<Vision_Trans_Max_Offset) AND (ABS(Error_Offset.A)<Vision_Rota_Max_Offset) AND (ABS(Error_Offset.B)<Vision_Rota_Max_Offset) AND (ABS(Error_Offset.C)<Vision_Rota_Max_Offset)  THEN

SWITCH Vision_PATH
CASE #X

POS_Offset.X=Result_Pos.X
CASE #Y

POS_Offset.Y=Result_Pos.Y

CASE #Z

POS_Offset.Z=Result_Pos.Z

CASE #XY

POS_Offset.X=Result_Pos.X
POS_Offset.Y=Result_Pos.Y

CASE #XZ

POS_Offset.Y=Result_Pos.Y
POS_Offset.Z=Result_Pos.Z
CASE #YZ

POS_Offset.Y=Result_Pos.Y
POS_Offset.Z=Result_Pos.Z
CASE #XYZ

POS_Offset.X=Result_Pos.X
POS_Offset.Y=Result_Pos.Y
POS_Offset.Z=Result_Pos.Z
CASE #XYZABC

POS_Offset.X=Result_Pos.X
POS_Offset.Y=Result_Pos.Y
POS_Offset.Z=Result_Pos.Z
POS_Offset.A=Result_Pos.A
POS_Offset.B=Result_Pos.B
POS_Offset.C=Result_Pos.C

ENDSWITCH

MSGNOTIFY(Message_Show[])


ELSE


MsgQuit(Message_Show[], "HanGao")
RETURN
ENDIF

CASE #UNKNOWN

RETURN

ENDSWITCH


ENDIF



;ENDIF

END
GLOBAL DEF Vision_Results_Offset(Vision_PATH:IN,POS_Offset_1:OUT,POS_Offset_2:OUT,POS_Offset_3:OUT,POS_Offset_4:OUT,POS_Offset_5:OUT,POS_Offset_6:OUT,POS_Offset_7:OUT,POS_Offset_8:OUT,POS_Offset_9:OUT)
DECL E6POS POS_Offset_1 ,POS_Offset_2,POS_Offset_3,POS_Offset_4,POS_Offset_5,POS_Offset_6,POS_Offset_7,POS_Offset_8,POS_Offset_9
DECL Vision_PATH_Enum Vision_PATH
DECL INT Result_ID

IF Vision_Type ==#Vision_Run THEN



Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_1)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_2)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_3)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_4)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_5)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_6)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_7)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_8)
Vision_Results_Pos(Vision_PATH,Vision_Result_POS,POS_Offset_9)
ENDIF




END






GLOBAL DEF HanGao_Surr_Calculate(Surr_Path:IN , Sink_Area:IN ,POS_Type:IN , Lin_Pos:OUt , Cir_Middle_POS:OUT , Cir_END_POS:OUT , Offset_info:OUT  ,Offset_cir_info:out , Offset_No:IN , Work_Area:IN, Sink_Type:IN)
;------------DECL_VALUE--------------
DECL REAL Surr_Path 
DECL Sink_Type_Enum  Sink_Type
DECL Area_Enum Sink_Area
DECL E6POS Lin_Pos
DECL E6POS Cir_Middle_POS
DECL E6POS Cir_END_POS
DECL Pos_Type_Enum Pos_Type
DECL Offset_POS Offset_info , Offset_cir_info
DECL Surround_Welding_Type Sink_Welding_Size
DECL INT OFFSET_NO,Work_Area

;------------DECL_VALUE--------------





Lin_Pos={X 0,Y 0, Z 0,A 0,B 0,C 0}

Cir_Middle_POS={X 0,Y 0, Z 0,A 0,B 0,C 0}

Cir_END_POS={X 0,Y 0, Z 0,A 0,B 0,C 0}


switch Work_Area

CASE 1
Sink_Welding_Size=N1_Sink_Data

CASE 2
Sink_Welding_Size=N2_Sink_Data

ENDSWITCH



SWITCH Sink_Area

CASE #L0
 
 
 
 
 
 UL_Equation(N315_OFFSET_POS,N45_OFFSET_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)
 
 
 
 ;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance
 ;Lin_Pos.Y=(Sink_Welding_Size.Sink_Size_Long-Sink_Welding_Size.Sink_Size_R*2)* (1-(Surr_Path*0.01))+Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_R
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 
 Lin_Pos.A=0 
 Lin_Pos.B=L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Angle
 Lin_Pos.C=0


L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.X=Lin_Pos.X
L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Y=Lin_Pos.Y
L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Z=Lin_Pos.Z
L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.A=Lin_Pos.A
L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.B=Lin_Pos.B
L0_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.C=Lin_Pos.C
CASE #C45


SWITCH Pos_Type

CASE #C_LIN_POS


UL_Equation(N315_OFFSET_POS,N45_OFFSET_POS,1,Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_R
Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)

Lin_Pos.A=0
Lin_Pos.B=C45_Welding_Craft[Work_Area,1].Welding_Angle
Lin_Pos.C=0

C45_Welding_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
C45_Welding_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
C45_Welding_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
C45_Welding_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
C45_Welding_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
C45_Welding_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE #C_CIR_POS


 Cir_Middle_POS.X=N45_CIR_POS.x
 Cir_Middle_POS.Y=N45_CIR_POS.Y
 
 ;Cir_Middle_POS.x=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R+(COS(45)*Sink_Welding_Size.Sink_Size_R)
 ;Cir_Middle_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+((1-COS(45))*Sink_Welding_Size.Sink_Size_R)
 Cir_Middle_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 
 
 UL_Equation(N45_OFFSET_POS,N135_OFFSET_POS,0,Sink_Welding_Size.Sink_Size_R,Cir_END_POS)
 
 ;Cir_END_POS.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R
 ;Cir_END_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance
 Cir_END_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)


 Cir_END_POS.A=0
 Cir_END_POS.B=0
 Cir_END_POS.C=C45_Welding_Craft[Work_Area,3].Welding_Angle



C45_Welding_Craft[Work_Area,2].Welding_Pos.X=Cir_Middle_POS.X
C45_Welding_Craft[Work_Area,2].Welding_Pos.Y=Cir_Middle_POS.Y
C45_Welding_Craft[Work_Area,2].Welding_Pos.Z=Cir_Middle_POS.Z
C45_Welding_Craft[Work_Area,2].Welding_Pos.A=Cir_Middle_POS.A
C45_Welding_Craft[Work_Area,2].Welding_Pos.B=Cir_Middle_POS.B
C45_Welding_Craft[Work_Area,2].Welding_Pos.C=Cir_Middle_POS.C

C45_Welding_Craft[Work_Area,3].Welding_Pos.X=Cir_END_POS.X
C45_Welding_Craft[Work_Area,3].Welding_Pos.Y=Cir_END_POS.Y
C45_Welding_Craft[Work_Area,3].Welding_Pos.Z=Cir_END_POS.Z
C45_Welding_Craft[Work_Area,3].Welding_Pos.A=Cir_END_POS.A
C45_Welding_Craft[Work_Area,3].Welding_Pos.B=Cir_END_POS.B
C45_Welding_Craft[Work_Area,3].Welding_Pos.C=Cir_END_POS.C

ENDSWITCH


CASE #L90


UL_Equation(N45_OFFSET_POS,N135_OFFSET_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R, Lin_Pos)

 ;Lin_Pos.X=(Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R*2)* (1-(Surr_Path*0.01))+Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_R
 ;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Left_Distance
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=0
 Lin_Pos.C=L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Angle

L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.X=Lin_Pos.X
L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Y=Lin_Pos.Y
L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Z=Lin_Pos.Z
L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.A=Lin_Pos.A
L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.B=Lin_Pos.B
L90_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.C=Lin_Pos.C

CASE #C135

SWITCH Pos_Type

CASE #C_LIN_POS

UL_Equation(N45_OFFSET_POS,N135_OFFSET_POS,1,Sink_Welding_Size.Sink_Size_R, Lin_Pos)

 ;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_R
 ;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Left_Distance
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=0
 Lin_Pos.C=C135_Welding_Craft[Work_Area,1].Welding_Angle

C135_Welding_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
C135_Welding_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
C135_Welding_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
C135_Welding_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
C135_Welding_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
C135_Welding_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE #C_CIR_POS



 Cir_Middle_POS.X=N135_CIR_POS.x
 Cir_Middle_POS.Y=N135_CIR_POS.Y


 ;Cir_Middle_POS.x=Sink_Welding_Size.Sink_Size_Down_Distance+((1-COS(45))*Sink_Welding_Size.Sink_Size_R)
 ;Cir_Middle_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+((1-COS(45))*Sink_Welding_Size.Sink_Size_R)
 Cir_Middle_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 
 
  
 UL_Equation(N135_OFFSET_POS,N225_OFFSET_POS,0,Sink_Welding_Size.Sink_Size_R,Cir_END_POS)
 
 ;Cir_END_POS.X=Sink_Welding_Size.Sink_Size_Down_Distance
 ;Cir_END_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_R
 Cir_END_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Cir_END_POS.A=0
 Cir_END_POS.B=C135_Welding_Craft[Work_Area,3].Welding_Angle
 Cir_END_POS.C=0

C135_Welding_Craft[Work_Area,2].Welding_Pos.X=Cir_Middle_POS.X
C135_Welding_Craft[Work_Area,2].Welding_Pos.Y=Cir_Middle_POS.Y
C135_Welding_Craft[Work_Area,2].Welding_Pos.Z=Cir_Middle_POS.Z
C135_Welding_Craft[Work_Area,2].Welding_Pos.A=Cir_Middle_POS.A
C135_Welding_Craft[Work_Area,2].Welding_Pos.B=Cir_Middle_POS.B
C135_Welding_Craft[Work_Area,2].Welding_Pos.C=Cir_Middle_POS.C

C135_Welding_Craft[Work_Area,3].Welding_Pos.X=Cir_END_POS.X
C135_Welding_Craft[Work_Area,3].Welding_Pos.Y=Cir_END_POS.Y
C135_Welding_Craft[Work_Area,3].Welding_Pos.Z=Cir_END_POS.Z
C135_Welding_Craft[Work_Area,3].Welding_Pos.A=Cir_END_POS.A
C135_Welding_Craft[Work_Area,3].Welding_Pos.B=Cir_END_POS.B
C135_Welding_Craft[Work_Area,3].Welding_Pos.C=Cir_END_POS.C

ENDSWITCH


CASE #L180

UL_Equation(N135_OFFSET_POS,N225_OFFSET_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R, Lin_Pos)

 ;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance
 ;Lin_Pos.Y=(Sink_Welding_Size.Sink_Size_Long-Sink_Welding_Size.Sink_Size_R*2)* (Surr_Path*0.01)+Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_R
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Angle
 Lin_Pos.C=0

L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.X=Lin_Pos.X
L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Y=Lin_Pos.Y
L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Z=Lin_Pos.Z
L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.A=Lin_Pos.A
L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.B=Lin_Pos.B
L180_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.C=Lin_Pos.C

CASE #C225

SWITCH Pos_Type

CASE #C_LIN_POS


 UL_Equation(N135_OFFSET_POS,N225_OFFSET_POS,1,Sink_Welding_Size.Sink_Size_R, Lin_Pos)
 
 ;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance
 ;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Long-Sink_Welding_Size.Sink_Size_R
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=C225_Welding_Craft[Work_Area,1].Welding_Angle
 Lin_Pos.C=0

C225_Welding_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
C225_Welding_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
C225_Welding_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
C225_Welding_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
C225_Welding_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
C225_Welding_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE #C_CIR_POS


 Cir_Middle_POS.X=N225_CIR_POS.x
 Cir_Middle_POS.Y=N225_CIR_POS.Y
 

 

 ;Cir_Middle_POS.x=Sink_Welding_Size.Sink_Size_Down_Distance+((1-COS(45))*Sink_Welding_Size.Sink_Size_R)
 ;Cir_Middle_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Long-Sink_Welding_Size.Sink_Size_R+( COS(45)*Sink_Welding_Size.Sink_Size_R )
 Cir_Middle_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 
  UL_Equation(N225_OFFSET_POS,N315_OFFSET_POS,0,Sink_Welding_Size.Sink_Size_R,Cir_END_POS)
  
 ;Cir_END_POS.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_R
; Cir_END_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Long
 Cir_END_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Cir_END_POS.A=0
 Cir_END_POS.B=0
 Cir_END_POS.C=C225_Welding_Craft[Work_Area,3].Welding_Angle
 
C225_Welding_Craft[Work_Area,2].Welding_Pos.X=Cir_Middle_POS.X
C225_Welding_Craft[Work_Area,2].Welding_Pos.Y=Cir_Middle_POS.Y
C225_Welding_Craft[Work_Area,2].Welding_Pos.Z=Cir_Middle_POS.Z
C225_Welding_Craft[Work_Area,2].Welding_Pos.A=Cir_Middle_POS.A
C225_Welding_Craft[Work_Area,2].Welding_Pos.B=Cir_Middle_POS.B
C225_Welding_Craft[Work_Area,2].Welding_Pos.C=Cir_Middle_POS.C

C225_Welding_Craft[Work_Area,3].Welding_Pos.X=Cir_END_POS.X
C225_Welding_Craft[Work_Area,3].Welding_Pos.Y=Cir_END_POS.Y
C225_Welding_Craft[Work_Area,3].Welding_Pos.Z=Cir_END_POS.Z
C225_Welding_Craft[Work_Area,3].Welding_Pos.A=Cir_END_POS.A
C225_Welding_Craft[Work_Area,3].Welding_Pos.B=Cir_END_POS.B
C225_Welding_Craft[Work_Area,3].Welding_Pos.C=Cir_END_POS.C
 
ENDSWITCH


CASE #L270



UL_Equation(N225_OFFSET_POS,N315_OFFSET_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R, Lin_Pos)




; Lin_Pos.X=(Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R*2)* (Surr_Path*0.01)+Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_R
 ;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Long
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=0
 Lin_Pos.C=L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Angle
 
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.X=Lin_Pos.X
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Y=Lin_Pos.Y
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.Z=Lin_Pos.Z
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.A=Lin_Pos.A
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.B=Lin_Pos.B
L270_Welding_Craft[Work_Area,OFFSET_NO].Welding_Pos.C=Lin_Pos.C

CASE #C315

SWITCH Pos_Type

CASE #C_LIN_POS



 UL_Equation(N225_OFFSET_POS,N315_OFFSET_POS,1,Sink_Welding_Size.Sink_Size_R, Lin_Pos)
 

 
 
 ;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R
 ;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance
 Lin_Pos.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Lin_Pos.A=0
 Lin_Pos.B=0
 Lin_Pos.C=C315_Welding_Craft[Work_Area,1].Welding_Angle

 C315_Welding_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
 C315_Welding_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
 C315_Welding_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
 C315_Welding_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
 C315_Welding_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
 C315_Welding_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE #C_CIR_POS

 
 Cir_Middle_POS.X=N315_CIR_POS.x
 Cir_Middle_POS.Y=N315_CIR_POS.Y
 

 ;Cir_Middle_POS.x=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width-Sink_Welding_Size.Sink_Size_R+(COS(45)*Sink_Welding_Size.Sink_Size_R)
 ;Cir_Middle_POS.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance-Sink_Welding_Size.Sink_Size_R+(COS(45)*Sink_Welding_Size.Sink_Size_R)
 Cir_Middle_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 
   UL_Equation(N315_OFFSET_POS,N45_OFFSET_POS,0,Sink_Welding_Size.Sink_Size_R,Cir_END_POS)
 
 ;Cir_END_POS.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width
 ;Cir_END_POS.Y=Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Long-Sink_Welding_Size.Sink_Size_R
 Cir_END_POS.Z=-(Sink_Welding_Size.Sink_Size_Panel_Thick)
 Cir_END_POS.A=0
 Cir_END_POS.B=C315_Welding_Craft[Work_Area,3].Welding_Angle
 Cir_END_POS.C=0
 
C315_Welding_Craft[Work_Area,2].Welding_Pos.X=Cir_Middle_POS.X
C315_Welding_Craft[Work_Area,2].Welding_Pos.Y=Cir_Middle_POS.Y
C315_Welding_Craft[Work_Area,2].Welding_Pos.Z=Cir_Middle_POS.Z
C315_Welding_Craft[Work_Area,2].Welding_Pos.A=Cir_Middle_POS.A
C315_Welding_Craft[Work_Area,2].Welding_Pos.B=Cir_Middle_POS.B
C315_Welding_Craft[Work_Area,2].Welding_Pos.C=Cir_Middle_POS.C

C315_Welding_Craft[Work_Area,3].Welding_Pos.X=Cir_END_POS.X
C315_Welding_Craft[Work_Area,3].Welding_Pos.Y=Cir_END_POS.Y
C315_Welding_Craft[Work_Area,3].Welding_Pos.Z=Cir_END_POS.Z
C315_Welding_Craft[Work_Area,3].Welding_Pos.A=Cir_END_POS.A
C315_Welding_Craft[Work_Area,3].Welding_Pos.B=Cir_END_POS.B
C315_Welding_Craft[Work_Area,3].Welding_Pos.C=Cir_END_POS.C
 
ENDSWITCH





CASE #N45
;




SWITCH  Offset_No

CASE 1

SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D45_Start_POS.X
Lin_Pos.Y=D45_Start_POS.X

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance*2+Sink_Welding_Size.Sink_Size_Width
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D45_Start_POS.X
Lin_Pos.Y=D45_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=0
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH

N45_Short_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
N45_Short_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
N45_Short_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
N45_Short_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
N45_Short_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
N45_Short_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE 2
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D45_Start_POS.X
Lin_Pos.Y=D45_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance*2+Sink_Welding_Size.Sink_Size_Width
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D45_Start_POS.X
Lin_Pos.Y=D45_Start_POS.Y

; Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
; Lin_Pos.Y=0
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N45_Short_Craft[Work_Area,2].Welding_Pos.X=Lin_Pos.X
N45_Short_Craft[Work_Area,2].Welding_Pos.Y=Lin_Pos.Y
N45_Short_Craft[Work_Area,2].Welding_Pos.Z=Lin_Pos.Z
N45_Short_Craft[Work_Area,2].Welding_Pos.A=Lin_Pos.A
N45_Short_Craft[Work_Area,2].Welding_Pos.B=Lin_Pos.B
N45_Short_Craft[Work_Area,2].Welding_Pos.C=Lin_Pos.C

CASE 3
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D45_End_POS.X
Lin_Pos.Y=D45_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance*2+Sink_Welding_Size.Sink_Size_Width
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_TwoPos-Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=0.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D45_End_POS.X
Lin_Pos.Y=D45_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=0.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N45_Short_Craft[Work_Area,3].Welding_Pos.X=Lin_Pos.X
N45_Short_Craft[Work_Area,3].Welding_Pos.Y=Lin_Pos.Y
N45_Short_Craft[Work_Area,3].Welding_Pos.Z=Lin_Pos.Z
N45_Short_Craft[Work_Area,3].Welding_Pos.A=Lin_Pos.A
N45_Short_Craft[Work_Area,3].Welding_Pos.B=Lin_Pos.B
N45_Short_Craft[Work_Area,3].Welding_Pos.C=Lin_Pos.C

CASE 4
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

UL_Equation(D45_Start_POS,D45_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_TwoPos-Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=-150
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

UL_Equation(D45_Start_POS,D45_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_Side-Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
Lin_Pos.Z=-150
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N45_Short_Craft[Work_Area,4].Welding_Pos.X=Lin_Pos.X
N45_Short_Craft[Work_Area,4].Welding_Pos.Y=Lin_Pos.Y
N45_Short_Craft[Work_Area,4].Welding_Pos.Z=Lin_Pos.Z
N45_Short_Craft[Work_Area,4].Welding_Pos.A=Lin_Pos.A
N45_Short_Craft[Work_Area,4].Welding_Pos.B=Lin_Pos.B
N45_Short_Craft[Work_Area,4].Welding_Pos.C=Lin_Pos.C
ENDSWITCH






CASE #N135
;
SWITCH  Offset_No

CASE 1
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D135_Start_POS.X
Lin_Pos.Y=D135_Start_POS.Y

;Lin_Pos.X=0
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D135_Start_POS.X
Lin_Pos.Y=D135_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=0
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N135_Short_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
N135_Short_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
N135_Short_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
N135_Short_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
N135_Short_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
N135_Short_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE 2
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D135_Start_POS.X
Lin_Pos.Y=D135_Start_POS.Y

;Lin_Pos.X=0
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D135_Start_POS.X
Lin_Pos.Y=D135_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=0
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N135_Short_Craft[Work_Area,2].Welding_Pos.X=Lin_Pos.X
N135_Short_Craft[Work_Area,2].Welding_Pos.Y=Lin_Pos.Y
N135_Short_Craft[Work_Area,2].Welding_Pos.Z=Lin_Pos.Z
N135_Short_Craft[Work_Area,2].Welding_Pos.A=Lin_Pos.A
N135_Short_Craft[Work_Area,2].Welding_Pos.B=Lin_Pos.B
N135_Short_Craft[Work_Area,2].Welding_Pos.C=Lin_Pos.C
CASE 3
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D135_End_POS.X
Lin_Pos.Y=D135_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_Side
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos
Lin_Pos.Z=0.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D135_End_POS.X
Lin_Pos.Y=D135_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=0.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N135_Short_Craft[Work_Area,3].Welding_Pos.X=Lin_Pos.X
N135_Short_Craft[Work_Area,3].Welding_Pos.Y=Lin_Pos.Y
N135_Short_Craft[Work_Area,3].Welding_Pos.Z=Lin_Pos.Z
N135_Short_Craft[Work_Area,3].Welding_Pos.A=Lin_Pos.A
N135_Short_Craft[Work_Area,3].Welding_Pos.B=Lin_Pos.B
N135_Short_Craft[Work_Area,3].Welding_Pos.C=Lin_Pos.C
CASE 4
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One


UL_Equation(D135_Start_POS,D135_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_Side-Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

UL_Equation(D135_Start_POS,D135_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_Side-Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N135_Short_Craft[Work_Area,4].Welding_Pos.X=Lin_Pos.X
N135_Short_Craft[Work_Area,4].Welding_Pos.Y=Lin_Pos.Y
N135_Short_Craft[Work_Area,4].Welding_Pos.Z=Lin_Pos.Z
N135_Short_Craft[Work_Area,4].Welding_Pos.A=Lin_Pos.A
N135_Short_Craft[Work_Area,4].Welding_Pos.B=Lin_Pos.B
N135_Short_Craft[Work_Area,4].Welding_Pos.C=Lin_Pos.C

ENDSWITCH





CASE #N225
;
SWITCH  Offset_No

CASE 1
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D225_Start_POS.X
Lin_Pos.Y=D225_Start_POS.Y

;Lin_Pos.X=0
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D225_Start_POS.X
Lin_Pos.Y=D225_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N225_Short_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
N225_Short_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
N225_Short_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
N225_Short_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
N225_Short_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
N225_Short_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE 2
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D225_Start_POS.X
Lin_Pos.Y=D225_Start_POS.Y

;Lin_Pos.X=0
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D225_Start_POS.X
Lin_Pos.Y=D225_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N225_Short_Craft[Work_Area,2].Welding_Pos.X=Lin_Pos.X
N225_Short_Craft[Work_Area,2].Welding_Pos.Y=Lin_Pos.Y
N225_Short_Craft[Work_Area,2].Welding_Pos.Z=Lin_Pos.Z
N225_Short_Craft[Work_Area,2].Welding_Pos.A=Lin_Pos.A
N225_Short_Craft[Work_Area,2].Welding_Pos.B=Lin_Pos.B
N225_Short_Craft[Work_Area,2].Welding_Pos.C=Lin_Pos.C

CASE 3
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One


Lin_Pos.X=D225_End_POS.X
Lin_Pos.Y=D225_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_Side
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

Lin_Pos.X=D225_End_POS.X
Lin_Pos.Y=D225_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2-Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N225_Short_Craft[Work_Area,3].Welding_Pos.X=Lin_Pos.X
N225_Short_Craft[Work_Area,3].Welding_Pos.Y=Lin_Pos.Y
N225_Short_Craft[Work_Area,3].Welding_Pos.Z=Lin_Pos.Z
N225_Short_Craft[Work_Area,3].Welding_Pos.A=Lin_Pos.A
N225_Short_Craft[Work_Area,3].Welding_Pos.B=Lin_Pos.B
N225_Short_Craft[Work_Area,3].Welding_Pos.C=Lin_Pos.C

CASE 4
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

UL_Equation(D225_Start_POS,D225_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_Side-Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
case #LeftRight_One

UL_Equation(D225_Start_POS,D225_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N225_Short_Craft[Work_Area,4].Welding_Pos.X=Lin_Pos.X
N225_Short_Craft[Work_Area,4].Welding_Pos.Y=Lin_Pos.Y
N225_Short_Craft[Work_Area,4].Welding_Pos.Z=Lin_Pos.Z
N225_Short_Craft[Work_Area,4].Welding_Pos.A=Lin_Pos.A
N225_Short_Craft[Work_Area,4].Welding_Pos.B=Lin_Pos.B
N225_Short_Craft[Work_Area,4].Welding_Pos.C=Lin_Pos.C

ENDSWITCH


CASE #N315
;
SWITCH  Offset_No

CASE 1
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D315_Start_POS.X
Lin_Pos.Y=D315_Start_POS.Y


;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance*2
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0

case #LeftRight_One


Lin_Pos.X=D315_Start_POS.X
Lin_Pos.Y=D315_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N315_Short_Craft[Work_Area,1].Welding_Pos.X=Lin_Pos.X
N315_Short_Craft[Work_Area,1].Welding_Pos.Y=Lin_Pos.Y
N315_Short_Craft[Work_Area,1].Welding_Pos.Z=Lin_Pos.Z
N315_Short_Craft[Work_Area,1].Welding_Pos.A=Lin_Pos.A
N315_Short_Craft[Work_Area,1].Welding_Pos.B=Lin_Pos.B
N315_Short_Craft[Work_Area,1].Welding_Pos.C=Lin_Pos.C

CASE 2
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D315_Start_POS.X
Lin_Pos.Y=D315_Start_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance*2
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0

case #LeftRight_One

Lin_Pos.X=D315_Start_POS.X
Lin_Pos.Y=D315_Start_POS.Y


;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N315_Short_Craft[Work_Area,2].Welding_Pos.X=Lin_Pos.X
N315_Short_Craft[Work_Area,2].Welding_Pos.Y=Lin_Pos.Y
N315_Short_Craft[Work_Area,2].Welding_Pos.Z=Lin_Pos.Z
N315_Short_Craft[Work_Area,2].Welding_Pos.A=Lin_Pos.A
N315_Short_Craft[Work_Area,2].Welding_Pos.B=Lin_Pos.B
N315_Short_Craft[Work_Area,2].Welding_Pos.C=Lin_Pos.C

CASE 3
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One

Lin_Pos.X=D315_End_POS.X
Lin_Pos.Y=D315_End_POS.Y


;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance*2-Sink_Welding_Size.Sink_Size_Short_Side
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0

case #LeftRight_One

Lin_Pos.X=D315_End_POS.X
Lin_Pos.Y=D315_End_POS.Y

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance*2-Sink_Welding_Size.Sink_Size_Short_Side
Lin_Pos.Z=0
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH


N315_Short_Craft[Work_Area,3].Welding_Pos.X=Lin_Pos.X
N315_Short_Craft[Work_Area,3].Welding_Pos.Y=Lin_Pos.Y
N315_Short_Craft[Work_Area,3].Welding_Pos.Z=Lin_Pos.Z
N315_Short_Craft[Work_Area,3].Welding_Pos.A=Lin_Pos.A
N315_Short_Craft[Work_Area,3].Welding_Pos.B=Lin_Pos.B
N315_Short_Craft[Work_Area,3].Welding_Pos.C=Lin_Pos.C

CASE 4
SWITCH Sink_Welding_Size.Sink_Type
CASE #UpDown_One


UL_Equation(D315_Start_POS,D315_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Width+Sink_Welding_Size.Sink_Size_Down_Distance+Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0

case #LeftRight_One

UL_Equation(D315_Start_POS,D315_End_POS,(Surr_Path*0.01),Sink_Welding_Size.Sink_Size_R,Lin_Pos)

;Lin_Pos.X=Sink_Welding_Size.Sink_Size_Short_OnePos+Sink_Welding_Size.Sink_Size_Short_TwoPos
;Lin_Pos.Y=Sink_Welding_Size.Sink_Size_Long+Sink_Welding_Size.Sink_Size_Left_Distance+Sink_Welding_Size.Sink_Size_Short_Side*(Surr_Path/100)
Lin_Pos.Z=-150.000
Lin_Pos.A=0
Lin_Pos.B=0
Lin_Pos.C=0
ENDSWITCH

N315_Short_Craft[Work_Area,4].Welding_Pos.X=Lin_Pos.X
N315_Short_Craft[Work_Area,4].Welding_Pos.Y=Lin_Pos.Y
N315_Short_Craft[Work_Area,4].Welding_Pos.Z=Lin_Pos.Z
N315_Short_Craft[Work_Area,4].Welding_Pos.A=Lin_Pos.A
N315_Short_Craft[Work_Area,4].Welding_Pos.B=Lin_Pos.B
N315_Short_Craft[Work_Area,4].Welding_Pos.C=Lin_Pos.C
ENDSWITCH


ENDSWITCH

SWITCH Pos_Type

CASE #L_LIN_POS,#C_LIN_POS




Lin_Pos.X=Lin_Pos.X+Offset_info.X
Lin_Pos.Y=Lin_Pos.Y+Offset_info.Y
Lin_Pos.Z=Lin_Pos.Z+Offset_info.Z



CASE #C_CIR_POS





Cir_Middle_POS.X=Cir_Middle_POS.X+Offset_info.X
Cir_Middle_POS.Y=Cir_Middle_POS.Y+Offset_info.Y
Cir_Middle_POS.Z=Cir_Middle_POS.Z+Offset_info.Z

Cir_END_POS.X=Cir_END_POS.X+Offset_cir_info.X
Cir_END_POS.Y=Cir_END_POS.Y+Offset_cir_info.Y
Cir_END_POS.Z=Cir_END_POS.Z+Offset_cir_info.Z

ENDSWITCH


END

GLOBAL DEF HanGao_Camera_Offset(Vision_Model:IN ,Calibration_Area:IN,Work_Camera:IN, OFFSET_POS:OUT)
DECL E6POS OFFSET_POS,Cam_45_POS,Cam_135_POS,Cam_225_POS,Cam_315_POS
DECL INT Calibration_Area,Work_Camera
DECL Surround_Welding_Type Sink_Size
DECL REAL T_X,T_Y,Q_X,Q_Y
DECL Vision_Model_Enum Vision_Model



switch Work_Camera

CASE 1

Sink_Size=N1_Sink_Data
Cam_45_POS=N1_Cam_45_POS
Cam_135_POS=N1_Cam_135_POS
Cam_225_POS=N1_Cam_225_POS
Cam_315_POS=N1_Cam_315_POS

CASE 2
Sink_Size=N2_Sink_Data
Cam_45_POS=N2_Cam_45_POS
Cam_135_POS=N2_Cam_135_POS
Cam_225_POS=N2_Cam_225_POS
Cam_315_POS=N2_Cam_315_POS

ENDSWITCH



SWITCH Calibration_Area

CASE 1


Q_Y=Camera_Calibration_Data.Sink_Size_Left_Distance-Sink_Size.Sink_Size_Left_Distance
Q_X=(Camera_Calibration_Data.Sink_Size_Down_Distance+Camera_Calibration_Data.Sink_Size_Width)-(Sink_Size.Sink_Size_Down_Distance+Sink_Size.Sink_Size_Width)

SWITCH Vision_Model

case #Calibration

IF (ABS(Q_Y)>=Vision_Scope ) OR (ABS(Q_X)>=Vision_Scope)THEN

OFFSET_POS=Cam_45_POS
OFFSET_POS.X=Cam_45_POS.X-Q_X
OFFSET_POS.Y=Cam_45_POS.Y-Q_Y

ELSE
OFFSET_POS=Cam_45_POS

ENDIF

ENDSWITCH

CASE 2


Q_Y=Camera_Calibration_Data.Sink_Size_Left_Distance-Sink_Size.Sink_Size_Left_Distance
Q_X=Camera_Calibration_Data.Sink_Size_Down_Distance-Sink_Size.Sink_Size_Down_Distance


SWITCH Vision_Model

case #Calibration
IF (ABS(Q_Y)>=Vision_Scope ) OR (ABS(Q_X)>=Vision_Scope)THEN
OFFSET_POS=Cam_135_POS
OFFSET_POS.X=Cam_135_POS.X-Q_X
OFFSET_POS.Y=Cam_135_POS.Y-Q_Y
ELSE
OFFSET_POS=Cam_135_POS

ENDIF

ENDSWITCH


CASE 3

Q_Y=(Camera_Calibration_Data.Sink_Size_Left_Distance+Camera_Calibration_Data.Sink_Size_Long)  -(Sink_Size.Sink_Size_Left_Distance+Sink_Size.Sink_Size_Long)
Q_X=Camera_Calibration_Data.Sink_Size_Down_Distance-Sink_Size.Sink_Size_Down_Distance

SWITCH Vision_Model

case #Calibration

IF (ABS(Q_Y)>=Vision_Scope ) OR (ABS(Q_X)>=Vision_Scope)THEN
OFFSET_POS=Cam_225_POS
OFFSET_POS.X=Cam_225_POS.X-Q_X
OFFSET_POS.Y=Cam_225_POS.Y-Q_Y
ELSE
OFFSET_POS=Cam_225_POS

ENDIF

ENDSWITCH


CASE 4

Q_Y=(Camera_Calibration_Data.Sink_Size_Left_Distance+Camera_Calibration_Data.Sink_Size_Long)-(Sink_Size.Sink_Size_Left_Distance+Sink_Size.Sink_Size_Long)
Q_X=(Camera_Calibration_Data.Sink_Size_Down_Distance+Camera_Calibration_Data.Sink_Size_Width)-(Sink_Size.Sink_Size_Down_Distance+Sink_Size.Sink_Size_Width)

SWITCH Vision_Model

case #Calibration
IF (ABS(Q_Y)>=Vision_Scope ) OR (ABS(Q_X)>=Vision_Scope)THEN
OFFSET_POS=Cam_315_POS
OFFSET_POS.X=Cam_315_POS.X-Q_X
OFFSET_POS.Y=Cam_315_POS.Y-Q_Y
ELSE
OFFSET_POS=Cam_315_POS

ENDIF

ENDSWITCH


ENDSWITCH


SWITCH Vision_Model

case #Find_Model
IF (ABS(Q_Y)>=Vision_Scope ) OR (ABS(Q_X)>=Vision_Scope)THEN
OFFSET_POS.X=OFFSET_POS.X-Q_X
OFFSET_POS.Y=OFFSET_POS.Y-Q_Y
ENDIF
ENDSWITCH





END


GLOBAL DEF HanGao_Calibration_Point(Calibration_POS:OUT,Calib_NO:IN)
DECL E6POS Calibration_POS
DECL INT Calib_NO



switch Global_Calib_Model

Case #New

Calibration_Point[Calib_NO]=Calibration_POS

Case #Add


Case #Text

Calibration_POS.X=Calibration_Text[Calib_NO].X
Calibration_POS.Y=Calibration_Text[Calib_NO].Y
endswitch


END

GLOBAL DEF HanGao_Camera_Sink_Pos( Calibration_POS:out,Calibration:IN,Work_Camera:IN)
DECL INT Calibration,Work_Camera
DECL BOOL User_Revise
DECL CHAR Meg_Str[1024]
DECL Surround_Welding_Type Sink_Size
DECL E6POS Calibration_POS
 Meg_Str[]="This operation will overwrite the original data, whether to confirm?"
 ;Global_Messages_Dlg( Meg_Str[] ,User_Revise)
User_Revise=FALSE






switch Work_Camera

CASE 1

Sink_Size=N1_Sink_Data


SWITCH  Global_Calib_Model
CASE #Text

SWITCH Calibration
CASE 1
Calibration_POS=N1_Cam_45_POS
CASE 2
Calibration_POS=N1_Cam_135_POS
CASE 3
Calibration_POS=N1_Cam_225_POS
CASE 4
Calibration_POS=N1_Cam_315_POS
ENDSWITCH


CASE #New


Global_Messages_Dlg( Meg_Str[] ,User_Revise)
IF User_Revise==TRUE THEN

SWITCH Calibration
CASE 1
N1_Cam_45_POS=Calibration_POS
CASE 2
N1_Cam_135_POS=Calibration_POS
CASE 3
N1_Cam_225_POS=Calibration_POS
CASE 4
N1_Cam_315_POS=Calibration_POS
ENDSWITCH


Camera_Calibration_Data=Sink_Size
endif


ENDSWITCH


CASE 2

Sink_Size=N2_Sink_Data
SWITCH  Global_Calib_Model
CASE #Text

SWITCH Calibration
CASE 1
Calibration_POS=N2_Cam_45_POS
CASE 2
Calibration_POS=N2_Cam_135_POS
CASE 3
Calibration_POS=N2_Cam_225_POS
CASE 4
Calibration_POS=N2_Cam_315_POS
ENDSWITCH


CASE #New

Global_Messages_Dlg( Meg_Str[] ,User_Revise)
IF User_Revise==TRUE THEN

SWITCH Calibration
CASE 1
N2_Cam_45_POS=Calibration_POS
CASE 2
N2_Cam_135_POS=Calibration_POS
CASE 3
N2_Cam_225_POS=Calibration_POS
CASE 4
N2_Cam_315_POS=Calibration_POS
ENDSWITCH

Camera_Calibration_Data=Sink_Size

endif
ENDSWITCH

ENDSWITCH










END


GLOBAL DEF HanGao_Base_Calculate(POS_1:IN,POS_2:IN,POS_3:IN,POS_4:IN,G_BASE:IN,Angle_Area:IN)
DECL E6POS POS_1
DECL E6POS POS_2
DECL E6POS POS_3
DECL E6POS POS_4
DECL Work_Area_Enum Angle_Area
DECL REAL Direction_Deg,ATan_Deg
DECL INT G_BASE,OPFFSET
DECL Calculate_Lin_Const Lin_1_CONST
DECL Calculate_Lin_Const Lin_2_CONST
DECL POS Lin_Curss
DECL CHAR Meg_Str[1024]
DECL BOOL User_Revise
DECL State_t _State
SWRITE( Meg_Str[] , _State , OPFFSET , "New_BASE[%d]=X:%7.3F,Y:%7.3F,Z:%7.3F,A:%7.3F,B:%7.3F,C:%7.3F" , G_BASE ,Lin_Curss.X,Lin_Curss.Y,Lin_Curss.Z,Lin_Curss.A,Lin_Curss.B,Lin_Curss.C) 



OPFFSET=0
Lin_Curss={X 0, Y 0, Z 0, A 0,B 0,C 0}




Lin_1_CONST.A=POS_2.Y-POS_1.Y
Lin_1_CONST.B=POS_1.X-POS_2.X
Lin_1_CONST.C=POS_2.X*POS_1.Y-POS_1.X*POS_2.Y

Lin_2_CONST.A=POS_4.Y-POS_3.Y
Lin_2_CONST.B=POS_3.X-POS_4.X
Lin_2_CONST.C=POS_4.X*POS_3.Y-POS_3.X*POS_4.Y


Lin_Curss.X=(Lin_1_CONST.B*Lin_2_CONST.C-Lin_2_CONST.B*Lin_1_CONST.C)/(Lin_1_CONST.A*Lin_2_CONST.B-Lin_2_CONST.A*Lin_1_CONST.B)
Lin_Curss.Y=(Lin_2_CONST.A*Lin_1_CONST.C-Lin_1_CONST.A*Lin_2_CONST.C)/(Lin_2_CONST.B*Lin_1_CONST.A-Lin_1_CONST.B*Lin_2_CONST.A)
Lin_Curss.Z=POS_1.Z



SWITCH Angle_Area


CASE #A0

Direction_Deg=-180.000

IF Lin_Curss.X<>POS_4.X THEN

ATan_Deg=ATAN2(ABS(POS_4.x-Lin_Curss.x),ABS(POS_4.y-Lin_Curss.y))

IF POS_4.X-Lin_Curss.X<0 THEN
Lin_Curss.A=Direction_Deg+ATan_Deg
ENDIF

IF POS_4.X-Lin_Curss.X>0 THEN
Lin_Curss.A=Direction_Deg-ATan_Deg
ENDIF


ELSE

Lin_Curss.A=Direction_Deg

ENDIF

CASE #A90

Direction_Deg=90.000

IF Lin_Curss.Y<>POS_4.Y THEN

ATan_Deg=ATAN2(ABS(POS_4.Y-Lin_Curss.Y),ABS(POS_4.X-Lin_Curss.X))

IF POS_4.Y-Lin_Curss.Y<0 THEN
Lin_Curss.A=Direction_Deg-ATan_Deg
ENDIF

IF POS_4.Y-Lin_Curss.Y>0 THEN
Lin_Curss.A=Direction_Deg+ATan_Deg
ENDIF


ELSE

Lin_Curss.A=Direction_Deg

ENDIF




CASE #A270

Direction_Deg=-90.000

IF Lin_Curss.Y<>POS_4.Y THEN

ATan_Deg=ATAN2(ABS(POS_4.Y-Lin_Curss.Y),ABS(POS_4.X-Lin_Curss.X))

IF POS_4.Y-Lin_Curss.Y<0 THEN
Lin_Curss.A=Direction_Deg+ATan_Deg
ENDIF

IF POS_4.Y-Lin_Curss.Y>0 THEN
Lin_Curss.A=Direction_Deg-ATan_Deg
ENDIF


ELSE

Lin_Curss.A=Direction_Deg

ENDIF




ENDSWITCH










Lin_Curss.B=0
Lin_Curss.C=-180.000


SWRITE( Meg_Str[] , _State , OPFFSET , "New_BASE[%d]=X:%7.3F,Y:%7.3F,Z:%7.3F,A:%7.3F,B:%7.3F,C:%7.3F" , G_BASE ,Lin_Curss.X,Lin_Curss.Y,Lin_Curss.Z,Lin_Curss.A,Lin_Curss.B,Lin_Curss.C) 


Global_Messages_Dlg( Meg_Str[] ,User_Revise)

IF User_Revise==TRUE THEN

IF G_BASE<>0  THEN

BASE_DATA[G_BASE].X=Lin_Curss.X
BASE_DATA[G_BASE].Y=Lin_Curss.Y
BASE_DATA[G_BASE].Z=Lin_Curss.Z
BASE_DATA[G_BASE].A=Lin_Curss.A
BASE_DATA[G_BASE].B=Lin_Curss.B
BASE_DATA[G_BASE].C=Lin_Curss.C

ENDIF

ENDIF


END


GLobAL DEF HanGao_DAT_ACT( Weld_Dat:IN,Weld_LDAT:IN)
DECL Surr_Welding_Craft_Type Weld_DAT
DECL LDAT Weld_LDAT


TRIGGER WHEN PATH=0 DELAY=0 DO $ANOUT[1]=Weld_Dat.Welding_Power/100
Weld_LDAT.VEL=Weld_Dat.Welding_Speed
Weld_LDAT.ACC=Weld_Dat.Welding_ACC
Weld_LDAT.APO_DIST=Weld_Dat.Welding_CDIS



END


GLOBAL DEF Global_Messages_Dlg( Messsage_All[]:IN , User_S:OUT)

DECL KrlMsg_T msg
DECL KrlMsgPar_T Par[3]
DECL KrlmsgOpt_T opt
DECL KrlMsgDlgSK_T SK[7]
DECL INT nHandle,keynumber,OPFFSET
DECl BOOL User_S
DECL CHAR Messsage_All[]



msg={modul[] "HanGao" ,Nr 7}
msg.msg_txt[] = Messsage_All[]
SK[1]={sk_Type #value, sk_txt[] "Yes"}
SK[2]={sk_type #value, sk_txt[] "NO" }

nHandle= Set_KrlDlg( msg, par[],sk[],opt)

IF (nHandle>0) THEN

While (Exists_KrlDlg(nHandle,keynumber))
 wait sec 0.1
ENDWhile

SWITCH keynumber
   case 1
   User_S=true
   
   case 2
   User_S=false

ENDSWITCH  










ENDIF


END


;Ax+By+C=0  
GLOBAL DEF Lin_Equation (P1:IN,P2:IN,L_A:OUT,L_B:OUT,L_C:OUT)
DECL E6POS P1,P2
DECL REAL A,B,C,L_A,L_B,L_C
L_A=0.00
L_B=0.00
L_C=0.00



L_A=P2.Y-P1.Y
L_B=P1.X-P2.X
L_C=P2.X*P1.Y-P1.X*P2.Y




END



;y=kx+b 
GLOBAL DEF Lin_Equation_LTk (A:IN,B:IN,C:IN,K_K:OUT,K_B:OUT)
DECL REAL A,B,C,K_K,K_B
K_K=0
K_B=0

K_K=-(a/b)
K_B=-(c/b)



END

;Point-User distance 
GLOBAL DEF UL_Equation (UP1:IN,UP2:IN,U_DIS:IN,C_L:IN, Result_Pos_1:OUT)
DECL E6POS UP1,UP2,Result_Pos_1,L_S,L_E
DECL REAL L_Distance,L_DIS_1,L_DIS_2,U_DIS,R_X,R_Y,C_L



PP_Equation(UP1,UP2,L_DIS_1)

L_S.X=C_L*(UP2.X-UP1.X)/L_DIS_1+UP1.X
L_S.Y=C_L*(UP2.Y-UP1.Y)/L_DIS_1+UP1.Y

L_E.X=(L_DIS_1-C_L)*(UP2.X-UP1.X)/L_DIS_1+UP1.X
L_E.Y=(L_DIS_1-C_L)*(UP2.Y-UP1.Y)/L_DIS_1+UP1.Y

PP_Equation(L_S,L_E,L_DIS_2)


Result_Pos_1.X=L_DIS_2*U_DIS*(L_E.X-L_S.X)/L_DIS_2+L_S.X
Result_Pos_1.Y=L_DIS_2*U_DIS*(L_E.Y-L_S.Y)/L_DIS_2+L_S.Y


; IF U_DIS>1 THEN

; Result_Pos_1.X=U_DIS*(UP2.X-UP1.X)/L_DIS+UP1.X
; Result_Pos_1.Y=U_DIS*(UP2.Y-UP1.Y)/L_DIS+UP1.Y

; ELSE

; Result_Pos_1.X=L_DIS*U_DIS*(UP2.X-UP1.X)/L_DIS+UP1.X
; Result_Pos_1.Y=L_DIS*U_DIS*(UP2.Y-UP1.Y)/L_DIS+UP1.Y

; ENDIF





END



;Point-Point distance 
GLOBAL DEF PP_Equation (PP1:IN,PP2:IN,L_Distance:OUT)
DECL E6POS PP1,PP2
DECL REAL L_Distance


L_Distance=0



L_Distance=SQRT((PP2.X-PP1.X)*(PP2.X-PP1.X)+(PP2.Y-PP1.Y)*(PP2.Y-PP1.Y))



END






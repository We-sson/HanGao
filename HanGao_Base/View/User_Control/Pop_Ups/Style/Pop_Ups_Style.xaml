<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:i="http://schemas.microsoft.com/xaml/behaviors" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">







    <Style x:Key="RadioButton_Pop_Style" TargetType="{x:Type RadioButton}">

        <Setter Property="Background" Value="{DynamicResource 全局_背景_白颜色}" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />

        <Setter Property="Margin" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">

                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="4" />
                        </Grid.RowDefinitions>



                        <Border x:Name="optionMark" Grid.Row="1"
                                Background="{DynamicResource 全局_按钮_黄颜色}"
                                CornerRadius="2"
                                Effect="{DynamicResource 全局背景阴影}"
                                RenderTransformOrigin="0.5,0.5"
                                Visibility="Hidden" />


                        <ContentPresenter x:Name="contentPresenter" Grid.Row="0"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          Opacity=" 0.5"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>




                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual3}" />-->
                            <!--<Setter Property="Padding" Value="4,-1,0,0" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">

                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.MouseOver.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.MouseOver.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.MouseOver.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Disabled.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Disabled.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.Disabled.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Pressed.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Pressed.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.Pressed.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">


                            <Setter TargetName="optionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#4b6587" />
                            <!--<Setter TargetName="optionMark" Property="Opacity" Value="1" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <!--<Setter TargetName="optionMark" Property="Opacity" Value="0.56" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="RadioButton_Sink_Type_Style" TargetType="{x:Type RadioButton}">

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot"
                          ShowGridLines="False"
                          SnapsToDevicePixels="True">

                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>



                        <Border x:Name="optionMark" Grid.Row="0"
                                Grid.RowSpan="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="15"
                                RenderTransformOrigin="0.5,0.5"
                                Visibility="Visible" />



                        <ContentPresenter x:Name="contentPresenter" Grid.Row="0"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          Opacity=" 0.5"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>




                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual3}" />-->
                            <!--<Setter Property="Padding" Value="4,-1,0,0" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">

                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.MouseOver.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.MouseOver.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.MouseOver.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Disabled.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Disabled.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.Disabled.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <!--<Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Pressed.Background}" />-->
                            <!--<Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Pressed.Border}" />-->
                            <!--<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource RadioButton.Pressed.Glyph}" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">


                            <Setter TargetName="optionMark" Property="Background" Value="#e6e6e6" />
                            <Setter TargetName="optionMark" Property="Effect" Value="{DynamicResource 全局背景阴影}" />
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                            <!--<Setter TargetName="optionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#4b6587" />-->
                            <!--<Setter TargetName="optionMark" Property="Opacity" Value="1" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <!--<Setter TargetName="optionMark" Property="Opacity" Value="0.56" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TextBox_Style" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource 全局_背景_白颜色}"  />
        <Setter Property="BorderBrush" Value="{DynamicResource 全局_按钮_灰颜色}" />
        <Setter Property="Foreground" Value="{DynamicResource 全局_按钮_蓝颜色}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="MaxLength" Value="8" />
        <Setter Property="FontSize" Value="18" />
        
          <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />



        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />



        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">


                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            SnapsToDevicePixels="True">


                        <Grid MinWidth="240" MinHeight="30"
                              Margin="4"
                          
                              ShowGridLines="False"  >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width ="auto" />
                            </Grid.ColumnDefinitions>




                            <TextBlock Grid.Column="0"
                                       Text="{TemplateBinding Tag}"
                                       Margin="5,3,3,3"               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       Foreground="#293241" />
                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1"
                                       FontFamily="{DynamicResource     全局_文字_英文字体}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="True"    FontSize="{TemplateBinding FontSize}"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" />
                            <TextBlock x:Name="Tb2" Grid.Column="2"
                                       Text="{TemplateBinding Uid}"
                                       Margin="0,0,3,0"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       Foreground="#8d99ae"
                                       Visibility="Visible" />
                            <TextBlock x:Name="Tb1" Grid.Column=" 2"
                                       Text="!"
                                       HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}"
                                       FontSize="20"
                                       Foreground="{DynamicResource 全局_按钮_红颜色}"
                                       Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>

                    </Border>




                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource 全局_按钮_红颜色}" />
                            <Setter TargetName="Tb2" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Tb1" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource 全局_按钮_红颜色}" />
                            <Setter TargetName="Tb2" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Tb1" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource 全局_按钮_绿颜色}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                        
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource 全局_按钮_绿颜色}" />
                     
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--  列表数据模板  -->
    <DataTemplate x:Key="Sink_Data_Template">


        <Button Style="{DynamicResource ButtonStyle3}"
                Margin="8"
                Padding="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="2"
                Foreground="Transparent">



            <Grid x:Name="Gb1"
                  HorizontalAlignment="Stretch"
                  ShowGridLines="False">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width=" 250" />
                    <ColumnDefinition Width=" 400" />
                    <ColumnDefinition Width=" 100" />
                </Grid.ColumnDefinitions>


                <Border x:Name="border" Grid.Column="0"
                        Grid.ColumnSpan="3"
                        Padding="10"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="{DynamicResource 全局_背景_白颜色}"
                        CornerRadius=" 10"
                        Effect="{DynamicResource 全局背景阴影}"
                        Opacity="1" />


                <TextBlock x:Name="Sink_ico" Grid.Column="0"
                           Text="{Binding Sink_Ico}"
                           Margin="20"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontFamily="{DynamicResource 全局_图标库}"
                           FontSize="115"
                           Foreground="{DynamicResource 全局_按钮_蓝颜色}" />






                <StackPanel Grid.Column="1"
                            Margin="20,10,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center">

                    <TextBlock Text="{Binding Sink_Title}"
                               Margin="0"
                               HorizontalAlignment="Left"
                               FontSize="32"
                               Foreground="{DynamicResource 全局_按钮_蓝颜色}" />
                    <TextBlock Text="{Binding Sink_Subtitle}"
                               Margin="3"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               FontSize="12"
                               Foreground="Gray"
                               LineHeight="9" />
                </StackPanel>

                <TextBlock Grid.Column="2"
                           Text="&#xe606;"
                           Margin="10"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           Effect="{StaticResource 全局背景阴影}"
                           FontFamily="{DynamicResource 全局_图标库}"
                           FontSize="30"
                           Foreground="{DynamicResource 全局_按钮_蓝颜色}"
                           TextDecorations="{x:Null}" />





            </Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <i:InvokeCommandAction Command="{Binding DataContext.Craft_UI_Comm, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}"
                                           CommandParameter="{Binding EventArgsConverter, RelativeSource={RelativeSource Mode=Self}}"
                                           PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>


        </Button>

    </DataTemplate>




    <Style x:Key="FocusVisual4">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="Sink_ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />

        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual4}" />
        <Setter Property="Template">
            <Setter.Value>




                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>





                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Content" Property="Opacity" Value="1" />-->
                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>

                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Content" Property="Opacity" Value="1" />-->
                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>-->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>












</ResourceDictionary>
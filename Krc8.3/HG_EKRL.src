&ACCESS RVO1
&REL 175
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM DISKPATH = KRC:\R1\Program\HK
DEF HG_EKRL( )
;fold DECL
DECL INT TTTT
DECL CHAR Bytes[32]
DECL EKI_STATUS RET
;endfold
;FOLD INI;%{PE}
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)

;ENDFOLD (INI)
;------------6-------


EKRL_CONNECT()

;Bytes[]="hellow"
;halt

;EKRL_Close()
END



GLOBAL DEF EKRL_Find_Model_Send(Find_ID:IN,Work_Number:IN,Find_Area:IN)
DECL INT Find_ID,Work_Number,ID,Work,Find_Area,OPFFSET
DECL CHAR Find_Area_String[1024], Message_Error[1024],Message_Show[1024]
DECL BOOL Calculation_Status
DECL Frame LastPos1,LastPos2,LastPos3,LastPos4
DECL EKI_STATUS RET
DECL State_t _State,STAT
DECL MODUS_T MODE
MODE=#SYNC


OPFFSET=0
Calculation_Status=false
$Flag[2]=false
LastPos1={X 0.0,Y 0.0,A 0.0,B 0.0,C 0.0}
LastPos2={X 0.0,Y 0.0,A 0.0,B 0.0,C 0.0}
LastPos3={X 0.0,Y 0.0,A 0.0,B 0.0,C 0.0}
LastPos4={X 0.0,Y 0.0,A 0.0,B 0.0,C 0.0}

Find_Area_String[]=" "
Message_Error[]=" "
Message_Show[]=" "

switch Find_Area

CASE 1

Find_Area_String[]="F_45"

CASE 2
Find_Area_String[]="F_135"

CASE 3
Find_Area_String[]="F_225"

CASE 4
Find_Area_String[]="F_315"

ENDSWITCH

RET=EKI_SetInt(EKRL_NAME[],"KUKA_Receive/Find_Model/@ID", Find_ID)
RET=EKI_SetInt(EKRL_NAME[],"KUKA_Receive/Find_Model/@Work", Work_Number)

RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/Find_Model/@Area", Find_Area_String[])

RET = EKI_Send(EKRL_NAME[],"KUKA_Receive")


Message_Wait("Find Model Data Sending",2)

RET=EKI_GetBool(EKRL_NAME[],"KUKA_Send/IsStatus" ,Calculation_Status)
RET=EKI_GetString(EKRL_NAME[],"KUKA_Send/Message_Error" ,Message_Error[])
IF  Calculation_Status THEN

MSGNOTIFY("Calculation Data Send OK!")
RET=EKI_GetFrame(EKRL_NAME[],"KUKA_Send/Calculation_Point/Pos_1" ,LastPos1)
RET=EKI_GetFrame(EKRL_NAME[],"KUKA_Send/Calculation_Point/Pos_2" ,LastPos2)
RET=EKI_GetFrame(EKRL_NAME[],"KUKA_Send/Calculation_Point/Pos_3" ,LastPos3)
RET=EKI_GetFrame(EKRL_NAME[],"KUKA_Send/Calculation_Point/Pos_4" ,LastPos4)



switch Find_Area

CASE 1

N45_OFFSET_POS=LastPos1
N45_CIR_POS=LastPos2
D45_Start_POS=LastPos3
D45_End_POS=LastPos4
CASE 2
N135_OFFSET_POS=LastPos1
N135_CIR_POS=LastPos2
D135_Start_POS=LastPos3
D135_End_POS=LastPos4
CASE 3
N225_OFFSET_POS=LastPos1
N225_CIR_POS=LastPos2
D225_Start_POS=LastPos3
D225_End_POS=LastPos4
CASE 4
N315_OFFSET_POS=LastPos1
N315_CIR_POS=LastPos2
D315_Start_POS=LastPos3
D315_End_POS=LastPos4
ENDSWITCH



else

SWRITE( Message_Show[] , _State , OPFFSET ,"Find Model Error: %s"  ,Message_Error[] ) 

MsgQuit(Message_Show[], "HanGao")
halt



ENDIF
 

RET=EKI_Close(EKRL_NAME[])
RET=EKI_Clear(EKRL_NAME[])

End


GLOBAL DEF  Message_Wait(Msg_String:IN,Flag_No:IN)
DECL CHAR Msg_String[]
DECL INT Flag_No
DECL INT Mess_INT
DECL BOOL Mess_Del
Mess_INT=-1

REPEAT
;halt
IF NOT Exists_KrlMsg(Mess_INT) THEN
Msg_Wait(Msg_String[],false,Mess_INT,Flag_No)
;halt
ENDIF


UNTIL  $Flag[Flag_No]
Mess_Del=Clear_KrlMsg(Mess_INT)


END



GLOBAL DEF EKRL_Calibration_Send(Area_Name:IN,Calibration_Number:IN)

DECL INT Area_Name
DECL CHAR Calibration_Name[1024]
DECL EKI_STATUS RET
DECL INT Calibration_Number
DECL BOOL Calibration_Status

$Flag[2]=FALSE
Calibration_Status=False
$Flag[2]=false



RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_1", Calibration_Point[1])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_2", Calibration_Point[2])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_3", Calibration_Point[3])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_4", Calibration_Point[4])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_5", Calibration_Point[5])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_6", Calibration_Point[6])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_7", Calibration_Point[7])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_8", Calibration_Point[8])
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Vision_Point/Pos_9", Calibration_Point[9])


SWITCH Area_Name

CASE 1
RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/Vision_Model/@Vision_Area","F_45")
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Camera_Point/Pos_1", Cam_45_POS)

CASE 2
RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/Vision_Model/@Vision_Area","F_135")
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Camera_Point/Pos_1", Cam_135_POS)
CASE 3
RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/Vision_Model/@Vision_Area","F_225")
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Camera_Point/Pos_1", Cam_225_POS)
CASE 4
RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/Vision_Model/@Vision_Area","F_315")
RET=EKI_SetFrame(EKRL_NAME[],"KUKA_Receive/Vision_Model/Camera_Point/Pos_1", Cam_315_POS)
ENDSWITCH


RET=EKI_SetString(EKRL_NAME[],"KUKA_Receive/@Model","Calibration_Point")
RET=EKI_SetInt(EKRL_NAME[],"KUKA_Receive/Vision_Model/@Calibration_Number", Calibration_Number)









RET = EKI_Send(EKRL_NAME[],"KUKA_Receive")



Message_Wait("Calibration Data Sending",2)



RET=EKI_GetBool(EKRL_NAME[],"KUKA_Send/@IsStatus" ,Calibration_Status)

IF  Calibration_Status THEN

MSGNOTIFY("Calibration Data ADD OK!")

else

MsgQuit("Calibration Data Error", "HanGao")
ENDIF
 

RET=EKI_Close(EKRL_NAME[])
RET=EKI_Clear(EKRL_NAME[])
;wait until data read
;WAIT FOR $FLAG[1]



End



GLOBAL DEF EKRL_Connect()
DECL EKI_STATUS RET
DECL INT Mess_INT
DECL BOOL Mess_Del

;EKRL_NAME[]="HanGaoEkrl"
Mess_INT=-1
RET=EKI_Init(EKRL_NAME[])
EKI_CHECK(RET,#Quit,EKRL_NAME[])

;HALT
RET=EKI_OPEN(EKRL_NAME[])
EKI_CHECK(RET,#Quit,EKRL_NAME[])

wait sec 2

;MSGNOTIFY("HanGao:Socket Connecting!")


REPEAT
;halt
IF NOT Exists_KrlMsg(Mess_INT) THEN
Msg_Wait("Socket Connecting",false,Mess_INT,Connect_Falg)
;halt
ENDIF
IF NOT $FLAG[Connect_Falg]  THEN
RET=EKI_open(EKRL_NAME[])
;HALT

wait sec 2



ENDIF

UNTIL  $Flag[Connect_Falg]
Mess_Del=Clear_KrlMsg(Mess_INT)
MSGNOTIFY("HanGao:Socket Connecting OK!")


End
GLOBAL DEF EKRL_Close()

DECL EKI_STATUS RET
RET=EKI_Close(EKRL_NAME[])
RET=EKI_Clear(EKRL_NAME[])

END



GLOBAL  DEF  Msg_Wait(mess[]:IN,Wait_ON:IN,MSG_INT:OUT,Connect_Flag:IN)
DECL INT Msg_INT,Connect_Flag
DECL BOOL Msg_Clear,Msg_Exit,Wait_ON
DECL CHAR mess[]
DECL KRLMSG_T MYMESSAGE
DECL KRLMSGPAR_T Parameter[3]
DECL KRLMSGOPT_T Option
Msg_INT=-1
Msg_Clear=false
Msg_Exit=false
mymessage.Msg_txt[]=mess[]
MYMESSAGE.Modul[]="HanGao"
MYMESSAGE.Nr=1
Parameter[1]={Par_Type #EMPTY}
Parameter[2]={Par_Type #EMPTY}
Parameter[3]={Par_Type #EMPTY}
MSG_INT=SET_KRLMSG(#WAITING,MYMESSAGE,Parameter[],Option)

REPEAT
wait sec 0.012
IF $FLAG[Connect_Flag] THEN
Msg_Clear=Clear_KrlMsg(Msg_INT)
ENDIF
Msg_Exit=Exists_KrlMsg(Msg_INT)
UNTIL NOT(Msg_Exit) OR Msg_Clear OR NOT(WAIT_ON)
END
//
// File generated by HDevelop for HALCON/.NET (C#) Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using HalconDotNet;

public partial class HDevelopExport
{
  // Procedures 
  // Chapter: 3D Object Model / Creation
  // Short Description: Generate a symbolic 3D object model of a camera. 
  private void gen_camera_object_model_3d (HTuple hv_CameraSetupModel, HTuple hv_CamIndex, 
      HTuple hv_CameraSize, out HTuple hv_OM3DCam)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_LensePose = new (), hv_CylinderLength = new ();
    HTuple hv_ObjectModel3DLense = new (), hv_ObjectModel3DInit = new ();
    HTuple hv_CamParams = new (), hv_Type = new ();
    HTuple hv_Tilt = new (), hv_Rot = new (), hv_HomMat3DIdentity = new ();
    HTuple hv_HomMat3DRotate = new (), hv_SensorToLenseRotation = new ();
    HTuple hv_ObjectModel3DInitTilted = new (), hv_BoundingBox = new ();
    HTuple hv_PX = new (), hv_PY = new (), hv_QZ = new ();
    HTuple hv_PoseBack = new (), hv_ObjectModel3DInitTiltedBack = new ();
    HTuple hv_CamPose = new (), hv_OM3DSensor = new ();
    HTuple hv_OM3DLense = new ();
    // Initialize local and output iconic variables 
    hv_OM3DCam = new ();
    //
    //Generate a cylinder (lens) and move it behind the origin in direction z.
    hv_LensePose.Dispose();
    HOperatorSet.CreatePose(0.0, 0.0, 0.0, 0, 0, 0, "Rp+T", "gba", "point", out hv_LensePose);
    hv_CylinderLength.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CylinderLength = hv_CameraSize/4.0;
    }
    using (HDevDisposeHelper dh = new ())
    {
    hv_ObjectModel3DLense.Dispose();
    HOperatorSet.GenCylinderObjectModel3d(hv_LensePose, hv_CameraSize/2.0, (-hv_CylinderLength)/2.0, 
        0.0, out hv_ObjectModel3DLense);
    }
    //
    //Generate a box (sensor housing) and tilt it, if necessary.
    using (HDevDisposeHelper dh = new ())
    {
    hv_ObjectModel3DInit.Dispose();
    HOperatorSet.GenBoxObjectModel3d(hv_LensePose, 1.0*hv_CameraSize, 1.0*hv_CameraSize, 
        1.0*hv_CameraSize, out hv_ObjectModel3DInit);
    }
    hv_CamParams.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModel, hv_CamIndex, "params", 
        out hv_CamParams);
    hv_Type.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModel, hv_CamIndex, "type", out hv_Type);
    //
    //Distinguish cases with/without tilt.
    if ((int)(hv_Type.TupleRegexpTest("tilt")) != 0)
    {
      hv_Tilt.Dispose();
      get_cam_par_data(hv_CamParams, "tilt", out hv_Tilt);
      hv_Rot.Dispose();
      get_cam_par_data(hv_CamParams, "rot", out hv_Rot);
    }
    else
    {
      hv_Tilt.Dispose();
      hv_Tilt = 0;
      hv_Rot.Dispose();
      hv_Rot = 0;
    }
    hv_HomMat3DIdentity.Dispose();
    HOperatorSet.HomMat3dIdentity(out hv_HomMat3DIdentity);
    using (HDevDisposeHelper dh = new ())
    {
    hv_HomMat3DRotate.Dispose();
    HOperatorSet.HomMat3dRotate(hv_HomMat3DIdentity, hv_Tilt.TupleRad(), ((((((hv_Rot.TupleRad()
        )).TupleCos())).TupleConcat(((hv_Rot.TupleRad())).TupleSin()))).TupleConcat(
        0), 0, 0, 0, out hv_HomMat3DRotate);
    }
    hv_SensorToLenseRotation.Dispose();
    HOperatorSet.HomMat3dToPose(hv_HomMat3DRotate, out hv_SensorToLenseRotation);
    hv_ObjectModel3DInitTilted.Dispose();
    HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DInit, hv_SensorToLenseRotation, 
        out hv_ObjectModel3DInitTilted);
    //
    //Move the sensor to a convenient position behind the lens.
    hv_BoundingBox.Dispose();
    HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DInitTilted, "bounding_box1", 
        out hv_BoundingBox);
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_QZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3DRotate, 0.0, 0.0, 0.5*hv_CameraSize, 
        out hv_PX, out hv_PY, out hv_QZ);
    }
    using (HDevDisposeHelper dh = new ())
    {
    hv_PoseBack.Dispose();
    HOperatorSet.CreatePose(-hv_PX, -hv_PY, (-(hv_BoundingBox.TupleSelect(5)))-(hv_CylinderLength/2.0), 
        0, 0, 0, "Rp+T", "gba", "point", out hv_PoseBack);
    }
    hv_ObjectModel3DInitTiltedBack.Dispose();
    HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DInitTilted, hv_PoseBack, 
        out hv_ObjectModel3DInitTiltedBack);
    //
    //Move to the position of the camera in world coordinates.
    hv_CamPose.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModel, hv_CamIndex, "pose", out hv_CamPose);
    hv_OM3DSensor.Dispose();
    HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DInitTiltedBack, hv_CamPose, 
        out hv_OM3DSensor);
    hv_OM3DLense.Dispose();
    HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DLense, hv_CamPose, out hv_OM3DLense);
    hv_OM3DCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_OM3DCam = new ();
    hv_OM3DCam = hv_OM3DCam.TupleConcat(hv_OM3DSensor, hv_OM3DLense);
    }
    //
    //Clean up.
    HOperatorSet.ClearObjectModel3d(hv_ObjectModel3DInit);
    HOperatorSet.ClearObjectModel3d(hv_ObjectModel3DInitTilted);
    HOperatorSet.ClearObjectModel3d(hv_ObjectModel3DInitTiltedBack);
    HOperatorSet.ClearObjectModel3d(hv_ObjectModel3DLense);

    hv_LensePose.Dispose();
    hv_CylinderLength.Dispose();
    hv_ObjectModel3DLense.Dispose();
    hv_ObjectModel3DInit.Dispose();
    hv_CamParams.Dispose();
    hv_Type.Dispose();
    hv_Tilt.Dispose();
    hv_Rot.Dispose();
    hv_HomMat3DIdentity.Dispose();
    hv_HomMat3DRotate.Dispose();
    hv_SensorToLenseRotation.Dispose();
    hv_ObjectModel3DInitTilted.Dispose();
    hv_BoundingBox.Dispose();
    hv_PX.Dispose();
    hv_PY.Dispose();
    hv_QZ.Dispose();
    hv_PoseBack.Dispose();
    hv_ObjectModel3DInitTiltedBack.Dispose();
    hv_CamPose.Dispose();
    hv_OM3DSensor.Dispose();
    hv_OM3DLense.Dispose();

    return;
  }

  // Chapter: 3D Object Model / Creation
  // Short Description: Generate 3D object models which visualize the cameras of a stereo model. 
  public void gen_camera_setup_object_model_3d (HTuple hv_CameraSetupModelID, HTuple hv_CameraSize, 
      HTuple hv_ConeLength, out HTuple hv_ObjectModel3DCamera, out HTuple hv_ObjectModel3DCone)
  {



        // Local iconic variables 

        // Local control variables 

        HTuple hv_NumCameras = new (), hv_AutoConeLength = new ();
        HTuple hv_AllCameras = new (), hv_CurrentCamera = new ();
        HTuple hv_ConcatZ = new (), hv_OtherCameras = new ();
        HTuple hv_Index = new (), hv_CamParam0 = new ();
        HTuple hv_Pose0 = new (), hv_CamParam1 = new ();
        HTuple hv_Pose1 = new (), hv_PoseInvert = new ();
        HTuple hv_RelPose = new (), hv_CX0 = new ();
        HTuple hv_CY0 = new (), hv_CX1 = new (), hv_CY1 = new ();
        HTuple hv_X = new (), hv_Y = new (), hv_Z = new ();
        HTuple hv_Dist = new (), hv_Exception = new ();
        HTuple hv_CameraType = new (), hv_ObjectModel3DConeTmp = new ();
        HTuple hv_ObjectModel3DCameraTmp = new ();
        HTuple   hv_CameraSize_COPY_INP_TMP = new HTuple(hv_CameraSize);
        HTuple   hv_ConeLength_COPY_INP_TMP = new HTuple(hv_ConeLength);

        // Initialize local and output iconic variables 
        hv_ObjectModel3DCamera = new ();
        hv_ObjectModel3DCone = new ();
    hv_NumCameras.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, "general", "num_cameras", 
        out hv_NumCameras);
    //
    //Consistency check:
    if ((int)(new HTuple(hv_NumCameras.TupleLess(1))) != 0)
    {
      throw new Exception("No camera set.");
    }
    if ((int)(hv_CameraSize_COPY_INP_TMP.TupleIsNumber()) != 0)
    {
      if ((int)(new HTuple(hv_CameraSize_COPY_INP_TMP.TupleLessEqual(0.0))) != 0)
      {
        throw new Exception("Invalid value for CameraSize. CameraSize must be positive or 'auto'.");
      }
    }
    else if ((int)(new HTuple(hv_CameraSize_COPY_INP_TMP.TupleNotEqual("auto"))) != 0)
    {
      throw new Exception("Invalid value for CameraSize. CameraSize must be positive or 'auto'.");
    }
    if ((int)(hv_ConeLength_COPY_INP_TMP.TupleIsNumber()) != 0)
    {
      if ((int)(new HTuple(hv_ConeLength_COPY_INP_TMP.TupleLessEqual(0.0))) != 0)
      {
        throw new Exception("Invalid value for ConeLength. ConeLength must be positive or 'auto'.");
      }
    }
    else if ((int)(new HTuple(hv_ConeLength_COPY_INP_TMP.TupleNotEqual("auto"))) != 0)
    {
      throw new Exception("Invalid value for ConeLength. ConeLength must be positive or 'auto'.");
    }
    //
    hv_AutoConeLength.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_AutoConeLength = new HTuple(hv_ConeLength_COPY_INP_TMP.TupleEqual(
        "auto"));
    }
    //
    hv_ObjectModel3DCamera.Dispose();
    hv_ObjectModel3DCamera = new ();
    hv_ObjectModel3DCone.Dispose();
    hv_ObjectModel3DCone = new ();
    hv_AllCameras.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_AllCameras = HTuple.TupleGenSequence(
        0,hv_NumCameras-1,1);
    }
    HTuple end_val26 = hv_NumCameras-1;
    HTuple step_val26 = 1;
    for (hv_CurrentCamera=0; hv_CurrentCamera.Continue(end_val26, step_val26); hv_CurrentCamera = hv_CurrentCamera.TupleAdd(step_val26))
    {
      hv_ConcatZ.Dispose();
      hv_ConcatZ = new ();
      if ((int)(hv_AutoConeLength) != 0)
      {
        if ((int)(new HTuple(hv_NumCameras.TupleLess(2))) != 0)
        {
          throw new Exception("You need at least two cameras for ConeLength == auto.");
        }
        //Intersect the line of sight of each camera with all other cameras.
        hv_OtherCameras.Dispose();
        using (HDevDisposeHelper dh = new ())
        {
        hv_OtherCameras = hv_AllCameras.TupleRemove(
            hv_AllCameras.TupleFind(hv_CurrentCamera));
        }
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_OtherCameras.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          hv_CamParam0.Dispose();
          HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CurrentCamera, 
              "params", out hv_CamParam0);
          hv_Pose0.Dispose();
          HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CurrentCamera, 
              "pose", out hv_Pose0);
          using (HDevDisposeHelper dh = new ())
          {
          hv_CamParam1.Dispose();
          HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_OtherCameras.TupleSelect(
              hv_Index), "params", out hv_CamParam1);
          }
          using (HDevDisposeHelper dh = new ())
          {
          hv_Pose1.Dispose();
          HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_OtherCameras.TupleSelect(
              hv_Index), "pose", out hv_Pose1);
          }
          //Intersect the lines of sight of the camera pair.
          hv_PoseInvert.Dispose();
          HOperatorSet.PoseInvert(hv_Pose1, out hv_PoseInvert);
          hv_RelPose.Dispose();
          HOperatorSet.PoseCompose(hv_PoseInvert, hv_Pose0, out hv_RelPose);
          hv_CX0.Dispose();
          get_cam_par_data(hv_CamParam0, "cx", out hv_CX0);
          hv_CY0.Dispose();
          get_cam_par_data(hv_CamParam0, "cy", out hv_CY0);
          hv_CX1.Dispose();
          get_cam_par_data(hv_CamParam1, "cx", out hv_CX1);
          hv_CY1.Dispose();
          get_cam_par_data(hv_CamParam1, "cy", out hv_CY1);
          try
          {
            hv_X.Dispose();hv_Y.Dispose();hv_Z.Dispose();hv_Dist.Dispose();
            HOperatorSet.IntersectLinesOfSight(hv_CamParam0, hv_CamParam1, hv_RelPose, 
                hv_CY0, hv_CX0, hv_CY1, hv_CX1, out hv_X, out hv_Y, out hv_Z, out hv_Dist);
          }
          // catch (Exception) 
          catch (Exception )
          {
            //HDevExpDefaultException1.ToHTuple(out hv_Exception);
            throw new Exception("Estimating a value for ConeLength automatically was not possible. Please use a number instead.");
          }
          using (HDevDisposeHelper dh = new ())
          {
          {
          HTuple 
            ExpTmpLocalVar_ConcatZ = hv_ConcatZ.TupleConcat(
              hv_Z);
          hv_ConcatZ.Dispose();
          hv_ConcatZ = ExpTmpLocalVar_ConcatZ;
          }
          }
        }
        //Use the Z value of the determined coordinates as basis for the ConeLength.
        hv_ConeLength_COPY_INP_TMP.Dispose();
        using (HDevDisposeHelper dh = new ())
        {
        hv_ConeLength_COPY_INP_TMP = (hv_ConcatZ.TupleMax()
            )*1.05;
        }
      }
      //
      //Create cone of sight 3D object models.
      //Distinguish cases with/without projection center.
      hv_CameraType.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CurrentCamera, "type", 
          out hv_CameraType);
      if ((int)(hv_CameraType.TupleRegexpTest("telecentric")) != 0)
      {
        hv_ObjectModel3DConeTmp.Dispose();
        gen_cone_telecentric_object_model_3d(hv_CameraSetupModelID, hv_CurrentCamera, 
            hv_ConeLength_COPY_INP_TMP, out hv_ObjectModel3DConeTmp);
      }
      else
      {
        hv_ObjectModel3DConeTmp.Dispose();
        gen_cone_perspective_object_model_3d(hv_CameraSetupModelID, hv_CurrentCamera, 
            hv_ConeLength_COPY_INP_TMP, out hv_ObjectModel3DConeTmp);
      }
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_ObjectModel3DCone = hv_ObjectModel3DCone.TupleConcat(
          hv_ObjectModel3DConeTmp);
      hv_ObjectModel3DCone.Dispose();
      hv_ObjectModel3DCone = ExpTmpLocalVar_ObjectModel3DCone;
      }
      }
      //
      //Create camera 3D object models.
      if ((int)(new HTuple(hv_CameraSize_COPY_INP_TMP.TupleEqual("auto"))) != 0)
      {
        //In auto mode, the camera size for all cameras
        //is defined by the first camera's cone length.
        hv_CameraSize_COPY_INP_TMP.Dispose();
        using (HDevDisposeHelper dh = new ())
        {
        hv_CameraSize_COPY_INP_TMP = hv_ConeLength_COPY_INP_TMP*0.1;
        }
      }
      hv_ObjectModel3DCameraTmp.Dispose();
      gen_camera_object_model_3d(hv_CameraSetupModelID, hv_CurrentCamera, hv_CameraSize_COPY_INP_TMP, 
          out hv_ObjectModel3DCameraTmp);
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_ObjectModel3DCamera = hv_ObjectModel3DCamera.TupleConcat(
          hv_ObjectModel3DCameraTmp);
      hv_ObjectModel3DCamera.Dispose();
      hv_ObjectModel3DCamera = ExpTmpLocalVar_ObjectModel3DCamera;
      }
      }
    }

    hv_CameraSize_COPY_INP_TMP.Dispose();
    hv_ConeLength_COPY_INP_TMP.Dispose();
    hv_NumCameras.Dispose();
    hv_AutoConeLength.Dispose();
    hv_AllCameras.Dispose();
    hv_CurrentCamera.Dispose();
    hv_ConcatZ.Dispose();
    hv_OtherCameras.Dispose();
    hv_Index.Dispose();
    hv_CamParam0.Dispose();
    hv_Pose0.Dispose();
    hv_CamParam1.Dispose();
    hv_Pose1.Dispose();
    hv_PoseInvert.Dispose();
    hv_RelPose.Dispose();
    hv_CX0.Dispose();
    hv_CY0.Dispose();
    hv_CX1.Dispose();
    hv_CY1.Dispose();
    hv_X.Dispose();
    hv_Y.Dispose();
    hv_Z.Dispose();
    hv_Dist.Dispose();
    hv_Exception.Dispose();
    hv_CameraType.Dispose();
    hv_ObjectModel3DConeTmp.Dispose();
    hv_ObjectModel3DCameraTmp.Dispose();

    return;
  }

  // Chapter: 3D Object Model / Creation
  // Short Description: Generate a 3D object model representing the view cone of a perspective camera. 
  private void gen_cone_perspective_object_model_3d (HTuple hv_CameraSetupModelID, 
      HTuple hv_CameraIndex, HTuple hv_ConeLength, out HTuple hv_ObjectModel3D)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CamPose = new (), hv_HomMat3D = new ();
    HTuple hv_CamParam = new (), hv_Width = new ();
    HTuple hv_Height = new (), hv_PX = new ();
    HTuple hv_PY = new (), hv_PZ = new (), hv_QX = new ();
    HTuple hv_QY = new (), hv_QZ = new (), hv_CBX = new ();
    HTuple hv_CBY = new (), hv_CBZ = new (), hv_CEXCam = new ();
    HTuple hv_CEYCam = new (), hv_CEZCam = new ();
    HTuple hv_CEX = new (), hv_CEY = new (), hv_CEZ = new ();
    HTuple hv_Index = new (), hv_Faces = new ();

    HTupleVector hvec_Points = new HTupleVector(1);
    // Initialize local and output iconic variables 
    hv_ObjectModel3D = new ();
    hv_CamPose.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CameraIndex, "pose", 
        out hv_CamPose);
    hv_HomMat3D.Dispose();
    HOperatorSet.PoseToHomMat3d(hv_CamPose, out hv_HomMat3D);
    hv_CamParam.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CameraIndex, "params", 
        out hv_CamParam);
    //
    hv_Width.Dispose();
    get_cam_par_data(hv_CamParam, "image_width", out hv_Width);
    hv_Height.Dispose();
    get_cam_par_data(hv_CamParam, "image_height", out hv_Height);
    //
    //Get the lines of sight of the four corner points of the image.
    //Scale them to the given length and transform into world coordinates.
    hvec_Points.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points = dh.Take((
        dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))));
    }
    //First corner.
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(0, 0, hv_CamParam, out hv_PX, out hv_PY, out hv_PZ, 
        out hv_QX, out hv_QY, out hv_QZ);
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[0] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEXCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEXCam = hv_PX+(((hv_QX-hv_PX)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEYCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEYCam = hv_PY+(((hv_QY-hv_PY)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEZCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEZCam = hv_PZ+hv_ConeLength;
    }
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_CEXCam, hv_CEYCam, hv_CEZCam, 
        out hv_CEX, out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[1] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Second corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(hv_Height-1, 0, hv_CamParam, out hv_PX, out hv_PY, 
        out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[2] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEXCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEXCam = hv_PX+(((hv_QX-hv_PX)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEYCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEYCam = hv_PY+(((hv_QY-hv_PY)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEZCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEZCam = hv_PZ+hv_ConeLength;
    }
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_CEXCam, hv_CEYCam, hv_CEZCam, 
        out hv_CEX, out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[3] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Third corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(hv_Height-1, hv_Width-1, hv_CamParam, out hv_PX, 
        out hv_PY, out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[4] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEXCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEXCam = hv_PX+(((hv_QX-hv_PX)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEYCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEYCam = hv_PY+(((hv_QY-hv_PY)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEZCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEZCam = hv_PZ+hv_ConeLength;
    }
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_CEXCam, hv_CEYCam, hv_CEZCam, 
        out hv_CEX, out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[5] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Fourth corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(0, hv_Width-1, hv_CamParam, out hv_PX, out hv_PY, 
        out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[6] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEXCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEXCam = hv_PX+(((hv_QX-hv_PX)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEYCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEYCam = hv_PY+(((hv_QY-hv_PY)/(hv_QZ-hv_PZ))*hv_ConeLength);
    }
    hv_CEZCam.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hv_CEZCam = hv_PZ+hv_ConeLength;
    }
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_CEXCam, hv_CEYCam, hv_CEZCam, 
        out hv_CEX, out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[7] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //
    //Sort the points by coordinate direction.
    hv_PX.Dispose();
    hv_PX = new ();
    hv_PY.Dispose();
    hv_PY = new ();
    hv_PZ.Dispose();
    hv_PZ = new ();
    for (hv_Index=0; (int)hv_Index<=7; hv_Index = (int)hv_Index + 1)
    {
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PX = hv_PX.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(0));
      hv_PX.Dispose();
      hv_PX = ExpTmpLocalVar_PX;
      }
      }
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PY = hv_PY.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(1));
      hv_PY.Dispose();
      hv_PY = ExpTmpLocalVar_PY;
      }
      }
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PZ = hv_PZ.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(2));
      hv_PZ.Dispose();
      hv_PZ = ExpTmpLocalVar_PZ;
      }
      }
    }
    hv_ObjectModel3D.Dispose();
    HOperatorSet.GenObjectModel3dFromPoints(hv_PX, hv_PY, hv_PZ, out hv_ObjectModel3D);
    //
    //Set the sides of the cone.
    hv_Faces.Dispose();
    hv_Faces = new ();
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(0)).TupleConcat(1)).TupleConcat(3)).TupleConcat(
        2));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(2)).TupleConcat(3)).TupleConcat(5)).TupleConcat(
        4));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(4)).TupleConcat(5)).TupleConcat(7)).TupleConcat(
        6));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(6)).TupleConcat(7)).TupleConcat(1)).TupleConcat(
        0));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    HOperatorSet.SetObjectModel3dAttribMod(hv_ObjectModel3D, "polygons", new (), 
        hv_Faces);

    hv_CamPose.Dispose();
    hv_HomMat3D.Dispose();
    hv_CamParam.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_PX.Dispose();
    hv_PY.Dispose();
    hv_PZ.Dispose();
    hv_QX.Dispose();
    hv_QY.Dispose();
    hv_QZ.Dispose();
    hv_CBX.Dispose();
    hv_CBY.Dispose();
    hv_CBZ.Dispose();
    hv_CEXCam.Dispose();
    hv_CEYCam.Dispose();
    hv_CEZCam.Dispose();
    hv_CEX.Dispose();
    hv_CEY.Dispose();
    hv_CEZ.Dispose();
    hv_Index.Dispose();
    hv_Faces.Dispose();
    hvec_Points.Dispose();

    return;
  }

  // Chapter: 3D Object Model / Creation
  // Short Description: Generate a 3D object model representing the view cone of a telecentric camera. 
  private void gen_cone_telecentric_object_model_3d (HTuple hv_CameraSetupModelID, 
      HTuple hv_CameraIndex, HTuple hv_ConeLength, out HTuple hv_ObjectModel3D)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CamPose = new (), hv_HomMat3D = new ();
    HTuple hv_CamParam = new (), hv_Width = new ();
    HTuple hv_Height = new (), hv_PX = new ();
    HTuple hv_PY = new (), hv_PZ = new (), hv_QX = new ();
    HTuple hv_QY = new (), hv_QZ = new (), hv_CBX = new ();
    HTuple hv_CBY = new (), hv_CBZ = new (), hv_CEZCam = new ();
    HTuple hv_CEX = new (), hv_CEY = new (), hv_CEZ = new ();
    HTuple hv_Index = new (), hv_Faces = new ();

    HTupleVector hvec_Points = new HTupleVector(1);
    // Initialize local and output iconic variables 
    hv_ObjectModel3D = new ();
    hv_CamPose.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CameraIndex, "pose", 
        out hv_CamPose);
    hv_HomMat3D.Dispose();
    HOperatorSet.PoseToHomMat3d(hv_CamPose, out hv_HomMat3D);
    hv_CamParam.Dispose();
    HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, hv_CameraIndex, "params", 
        out hv_CamParam);
    //
    hv_Width.Dispose();
    get_cam_par_data(hv_CamParam, "image_width", out hv_Width);
    hv_Height.Dispose();
    get_cam_par_data(hv_CamParam, "image_height", out hv_Height);
    //
    //Get the lines of sight of the four corner points of the image.
    //Scale them to the given length and transform into world coordinates.
    hvec_Points.Dispose();
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points = dh.Take((
        dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))));
    }
    //First corner.
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(0, 0, hv_CamParam, out hv_PX, out hv_PY, out hv_PZ, 
        out hv_QX, out hv_QY, out hv_QZ);
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[0] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEZCam.Dispose();
    hv_CEZCam = new HTuple(hv_ConeLength);
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_QX, hv_QY, hv_CEZCam, out hv_CEX, 
        out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[1] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Second corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(hv_Height-1, 0, hv_CamParam, out hv_PX, out hv_PY, 
        out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[2] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEZCam.Dispose();
    hv_CEZCam = new HTuple(hv_ConeLength);
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_QX, hv_QY, hv_CEZCam, out hv_CEX, 
        out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[3] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Third corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(hv_Height-1, hv_Width-1, hv_CamParam, out hv_PX, 
        out hv_PY, out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[4] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEZCam.Dispose();
    hv_CEZCam = new HTuple(hv_ConeLength);
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_QX, hv_QY, hv_CEZCam, out hv_CEX, 
        out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[5] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //Fourth corner.
    using (HDevDisposeHelper dh = new ())
    {
    hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
    HOperatorSet.GetLineOfSight(0, hv_Width-1, hv_CamParam, out hv_PX, out hv_PY, 
        out hv_PZ, out hv_QX, out hv_QY, out hv_QZ);
    }
    hv_CBX.Dispose();hv_CBY.Dispose();hv_CBZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_PX, hv_PY, hv_PZ, out hv_CBX, 
        out hv_CBY, out hv_CBZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[6] = dh.Add(new HTupleVector(((hv_CBX.TupleConcat(
        hv_CBY))).TupleConcat(hv_CBZ)));
    }
    hv_CEZCam.Dispose();
    hv_CEZCam = new HTuple(hv_ConeLength);
    hv_CEX.Dispose();hv_CEY.Dispose();hv_CEZ.Dispose();
    HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_QX, hv_QY, hv_CEZCam, out hv_CEX, 
        out hv_CEY, out hv_CEZ);
    using (HDevDisposeHelper dh = new ())
    {
    hvec_Points[7] = dh.Add(new HTupleVector(((hv_CEX.TupleConcat(
        hv_CEY))).TupleConcat(hv_CEZ)));
    }
    //
    //Sort the points by coordinate direction.
    hv_PX.Dispose();
    hv_PX = new ();
    hv_PY.Dispose();
    hv_PY = new ();
    hv_PZ.Dispose();
    hv_PZ = new ();
    for (hv_Index=0; (int)hv_Index<=7; hv_Index = (int)hv_Index + 1)
    {
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PX = hv_PX.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(0));
      hv_PX.Dispose();
      hv_PX = ExpTmpLocalVar_PX;
      }
      }
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PY = hv_PY.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(1));
      hv_PY.Dispose();
      hv_PY = ExpTmpLocalVar_PY;
      }
      }
      using (HDevDisposeHelper dh = new ())
      {
      {
      HTuple 
        ExpTmpLocalVar_PZ = hv_PZ.TupleConcat(
          (hvec_Points[hv_Index].T).TupleSelect(2));
      hv_PZ.Dispose();
      hv_PZ = ExpTmpLocalVar_PZ;
      }
      }
    }
    hv_ObjectModel3D.Dispose();
    HOperatorSet.GenObjectModel3dFromPoints(hv_PX, hv_PY, hv_PZ, out hv_ObjectModel3D);
    //
    //Set the sides of the cone.
    hv_Faces.Dispose();
    hv_Faces = new ();
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(0)).TupleConcat(1)).TupleConcat(3)).TupleConcat(
        2));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(2)).TupleConcat(3)).TupleConcat(5)).TupleConcat(
        4));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(4)).TupleConcat(5)).TupleConcat(7)).TupleConcat(
        6));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    using (HDevDisposeHelper dh = new ())
    {
    {
    HTuple 
      ExpTmpLocalVar_Faces = hv_Faces.TupleConcat(
        ((((new HTuple(4)).TupleConcat(6)).TupleConcat(7)).TupleConcat(1)).TupleConcat(
        0));
    hv_Faces.Dispose();
    hv_Faces = ExpTmpLocalVar_Faces;
    }
    }
    HOperatorSet.SetObjectModel3dAttribMod(hv_ObjectModel3D, "polygons", new (), 
        hv_Faces);

    hv_CamPose.Dispose();
    hv_HomMat3D.Dispose();
    hv_CamParam.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_PX.Dispose();
    hv_PY.Dispose();
    hv_PZ.Dispose();
    hv_QX.Dispose();
    hv_QY.Dispose();
    hv_QZ.Dispose();
    hv_CBX.Dispose();
    hv_CBY.Dispose();
    hv_CBZ.Dispose();
    hv_CEZCam.Dispose();
    hv_CEX.Dispose();
    hv_CEY.Dispose();
    hv_CEZ.Dispose();
    hv_Index.Dispose();
    hv_Faces.Dispose();
    hvec_Points.Dispose();

    return;
  }



}

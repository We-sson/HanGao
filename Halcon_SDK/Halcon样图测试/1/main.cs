//
// File generated by HDevelop for HALCON/.NET (C#) Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // Local procedures 
  public void disp_camera_parameters_multi_view_4 (HTuple hv_WindowHandles, HTuple hv_ParLabels, 
      HTuple hv_CamPar0, HTuple hv_CamPar1, HTuple hv_CamPar2, HTuple hv_CamPar3)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CameraType = new (), hv_Style = new ();
    HTuple hv_Unit = new (), hv_Message0 = new ();
    HTuple hv_Message1 = new (), hv_Message2 = new ();
    HTuple hv_Message3 = new (), hv_Index = new ();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays the camera parameters
      //of a multi-view camera setup consisting of
      //four cameras in four different windows
      //
      //Test if enough window handles were provided
      if ((int)(new HTuple((new HTuple(hv_WindowHandles.TupleLength())).TupleLess(
          4))) != 0)
      {
        using (HDevDisposeHelper dh = new ())
        {
        disp_message(hv_WindowHandles.TupleSelect(0), "Not enough opened windows!", 
            "window", 12, 12, "black", "true");
        }
      }
      //
      //Get the type of the camera type (assuming that
      //they all are identical)
      hv_CameraType.Dispose();
      get_cam_par_data(hv_CamPar0, "camera_type", out hv_CameraType);
      if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_polynomial"))) != 0)
      {
        //'area_scan_polynomial' camera model
        hv_Style.Dispose();
        hv_Style = new ();
        hv_Style[0] = ".2e";
        hv_Style[1] = ".2e";
        hv_Style[2] = ".2e";
        hv_Style[3] = ".2e";
        hv_Style[4] = ".2e";
        hv_Style[5] = ".2e";
        hv_Style[6] = ".1e";
        hv_Style[7] = ".1e";
        hv_Style[8] = ".2f";
        hv_Style[9] = ".2f";
        hv_Unit.Dispose();
        hv_Unit = new ();
        hv_Unit[0] = " m";
        hv_Unit[1] = "";
        hv_Unit[2] = "";
        hv_Unit[3] = "";
        hv_Unit[4] = "";
        hv_Unit[5] = "";
        hv_Unit[6] = " m";
        hv_Unit[7] = " m";
        hv_Unit[8] = " px";
        hv_Unit[9] = " px";
      }
      else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_division"))) != 0)
      {
        //'area_scan_division' camera model
        hv_Style.Dispose();
        hv_Style = new ();
        hv_Style[0] = ".2e";
        hv_Style[1] = ".2f";
        hv_Style[2] = ".1e";
        hv_Style[3] = ".1e";
        hv_Style[4] = ".2f";
        hv_Style[5] = ".2f";
        hv_Unit.Dispose();
        hv_Unit = new ();
        hv_Unit[0] = " m";
        hv_Unit[1] = "";
        hv_Unit[2] = " m";
        hv_Unit[3] = " m";
        hv_Unit[4] = " px";
        hv_Unit[5] = " px";
      }
      else
      {
        using (HDevDisposeHelper dh = new ())
        {
        disp_message(hv_WindowHandles.TupleSelect(0), "CamPar0 is not valid!", "window", 
            12, 12, "black", "true");
        }
      }
      //
      //Display the results now
      hv_Message0.Dispose();
      hv_Message0 = "Parameters of Camera 0";
      hv_Message1.Dispose();
      hv_Message1 = "Parameters of Camera 1";
      hv_Message2.Dispose();
      hv_Message2 = "Parameters of Camera 2";
      hv_Message3.Dispose();
      hv_Message3 = "Parameters of Camera 3";
      for (hv_Index=1; (int)hv_Index<=(int)((new HTuple(hv_CamPar1.TupleLength()))-3); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message0 = hv_Message0.TupleConcat(
            ((("  "+(hv_ParLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPar0.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index-1))))+(hv_Unit.TupleSelect(
            hv_Index-1)));
        hv_Message0.Dispose();
        hv_Message0 = ExpTmpLocalVar_Message0;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message1 = hv_Message1.TupleConcat(
            ((("  "+(hv_ParLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPar1.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index-1))))+(hv_Unit.TupleSelect(
            hv_Index-1)));
        hv_Message1.Dispose();
        hv_Message1 = ExpTmpLocalVar_Message1;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message2 = hv_Message2.TupleConcat(
            ((("  "+(hv_ParLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPar2.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index-1))))+(hv_Unit.TupleSelect(
            hv_Index-1)));
        hv_Message2.Dispose();
        hv_Message2 = ExpTmpLocalVar_Message2;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message3 = hv_Message3.TupleConcat(
            ((("  "+(hv_ParLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPar3.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index-1))))+(hv_Unit.TupleSelect(
            hv_Index-1)));
        hv_Message3.Dispose();
        hv_Message3 = ExpTmpLocalVar_Message3;
        }
        }
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(0), hv_Message0, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(1), hv_Message1, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(2), hv_Message2, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(3), hv_Message3, "window", 12, 12, 
          "black", "true");
      }

      hv_CameraType.Dispose();
      hv_Style.Dispose();
      hv_Unit.Dispose();
      hv_Message0.Dispose();
      hv_Message1.Dispose();
      hv_Message2.Dispose();
      hv_Message3.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (Exception e )
    {

      hv_CameraType.Dispose();
      hv_Style.Dispose();
      hv_Unit.Dispose();
      hv_Message0.Dispose();
      hv_Message1.Dispose();
      hv_Message2.Dispose();
      hv_Message3.Dispose();
      hv_Index.Dispose();

            throw new Exception("获得多视角摄像机参数失败！原因：" + e.Message);
            //throw;
    }
  }

  public void disp_camera_poses_multi_view_4 (HTuple hv_WindowHandles, HTuple hv_PoseLabels, 
      HTuple hv_CamPose0, HTuple hv_CamPose1, HTuple hv_CamPose2, HTuple hv_CamPose3)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Style = new (), hv_Unit = new ();
    HTuple hv_Index = new (), hv_Message0 = new ();
    HTuple hv_Message1 = new (), hv_Message2 = new ();
    HTuple hv_Message3 = new ();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays the camera poses
      //of a multi-view camera setup consisting
      //of four cameras in four different windows
      //
      //Test if enough window handles were provided
      if ((int)(new HTuple((new HTuple(hv_WindowHandles.TupleLength())).TupleLess(
          4))) != 0)
      {
        using (HDevDisposeHelper dh = new ())
        {
        disp_message(hv_WindowHandles.TupleSelect(0), "Not enough opened windows!", 
            "window", 12, 12, "black", "true");
        }
      }
      //
      //Display the results now
      hv_Style.Dispose();
      hv_Style = new ();
      hv_Style[0] = ".2e";
      hv_Style[1] = ".2e";
      hv_Style[2] = ".2e";
      hv_Style[3] = ".2f";
      hv_Style[4] = ".2f";
      hv_Style[5] = ".2f";
      hv_Unit.Dispose();
      hv_Unit = new ();
      hv_Unit[0] = " m";
      hv_Unit[1] = " m";
      hv_Unit[2] = " m";
      hv_Unit[3] = "°";
      hv_Unit[4] = "°";
      hv_Unit[5] = "°";
      //
      for (hv_Index=0; (int)hv_Index<=3; hv_Index = (int)hv_Index + 1)
      {
        HDevWindowStack.SetActive(hv_WindowHandles.TupleSelect(
            hv_Index));
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
        }
      }
      //
      hv_Message0.Dispose();
      hv_Message0 = "Pose of Camera 0";
      hv_Message1.Dispose();
      hv_Message1 = "Pose of Camera 1";
      hv_Message2.Dispose();
      hv_Message2 = "Pose of Camera 2";
      hv_Message3.Dispose();
      hv_Message3 = "Pose of Camera 3";
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_CamPose0.TupleLength()
          ))-2); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message0 = hv_Message0.TupleConcat(
            ((("  "+(hv_PoseLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPose0.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index))))+(hv_Unit.TupleSelect(
            hv_Index)));
        hv_Message0.Dispose();
        hv_Message0 = ExpTmpLocalVar_Message0;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message1 = hv_Message1.TupleConcat(
            ((("  "+(hv_PoseLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPose1.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index))))+(hv_Unit.TupleSelect(
            hv_Index)));
        hv_Message1.Dispose();
        hv_Message1 = ExpTmpLocalVar_Message1;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message2 = hv_Message2.TupleConcat(
            ((("  "+(hv_PoseLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPose2.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index))))+(hv_Unit.TupleSelect(
            hv_Index)));
        hv_Message2.Dispose();
        hv_Message2 = ExpTmpLocalVar_Message2;
        }
        }
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_Message3 = hv_Message3.TupleConcat(
            ((("  "+(hv_PoseLabels.TupleSelect(hv_Index)))+" = ")+(((hv_CamPose3.TupleSelect(
            hv_Index))).TupleString(hv_Style.TupleSelect(hv_Index))))+(hv_Unit.TupleSelect(
            hv_Index)));
        hv_Message3.Dispose();
        hv_Message3 = ExpTmpLocalVar_Message3;
        }
        }
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(0), hv_Message0, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(1), hv_Message1, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(2), hv_Message2, "window", 12, 12, 
          "black", "true");
      }
      using (HDevDisposeHelper dh = new ())
      {
      disp_message(hv_WindowHandles.TupleSelect(3), hv_Message3, "window", 12, 12, 
          "black", "true");
      }

      hv_Style.Dispose();
      hv_Unit.Dispose();
      hv_Index.Dispose();
      hv_Message0.Dispose();
      hv_Message1.Dispose();
      hv_Message2.Dispose();
      hv_Message3.Dispose();

      return;
    }
    catch (Exception e)
    {

      hv_Style.Dispose();
      hv_Unit.Dispose();
      hv_Index.Dispose();
      hv_Message0.Dispose();
      hv_Message1.Dispose();
      hv_Message2.Dispose();
      hv_Message3.Dispose();

            throw new Exception("设置多视角摄像机姿势失败！原因：" + e.Message);
        }
    }

  public void enforce_visualization (HTuple hv_WindowHandles)
  {



    // Local control variables 

    HTuple hv_Index = new ();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure enforces the visualization in the windows
      //specified within WindowHandles
      //
      HOperatorSet.SetSystem("flush_graphic", "true");
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_WindowHandles.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new ())
        {
        HOperatorSet.WriteString(hv_WindowHandles.TupleSelect(hv_Index), "");
        }
      }

      hv_Index.Dispose();

      return;
    }
    catch (Exception e)
    {

      hv_Index.Dispose();

      throw new Exception ("强制可视化失败！原因："+e.Message);
    }
  }

  public void open_windows_multi_view_setup (HTuple hv_Height, HTuple hv_Width, HTuple hv_Scale, 
      out HTuple hv_WindowHandles)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowHandle3 = new (), hv_WindowHandle2 = new ();
    HTuple hv_WindowHandle1 = new (), hv_WindowHandle0 = new ();
    // Initialize local and output iconic variables 
    hv_WindowHandles = new ();
    try
    {
      //This procedure opens four windows in order to display
      //the images of a multi-view stereo setup consisting
      //of four cameras
      //
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow((hv_Height*hv_Scale)+10,(hv_Width*hv_Scale)+10,hv_Width*hv_Scale,hv_Height*hv_Scale,0,"visible","",out hv_WindowHandle3);
      HDevWindowStack.Push(hv_WindowHandle3);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 1);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      set_display_font(hv_WindowHandle3, 14, "mono", "true", "false");
      //
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow((hv_Height*hv_Scale)+10,0,hv_Width*hv_Scale,hv_Height*hv_Scale,0,"visible","",out hv_WindowHandle2);
      HDevWindowStack.Push(hv_WindowHandle2);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 1);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      set_display_font(hv_WindowHandle2, 14, "mono", "true", "false");
      //
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,(hv_Width*hv_Scale)+10,hv_Width*hv_Scale,hv_Height*hv_Scale,0,"visible","",out hv_WindowHandle1);
      HDevWindowStack.Push(hv_WindowHandle1);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 1);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      set_display_font(hv_WindowHandle1, 14, "mono", "true", "false");
      //
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,0,hv_Width*hv_Scale,hv_Height*hv_Scale,0,"visible","",out hv_WindowHandle0);
      HDevWindowStack.Push(hv_WindowHandle0);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 1);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      set_display_font(hv_WindowHandle0, 14, "mono", "true", "false");
      hv_WindowHandles.Dispose();
      using (HDevDisposeHelper dh = new ())
      {
      hv_WindowHandles = new ();
      hv_WindowHandles = hv_WindowHandles.TupleConcat(hv_WindowHandle0, hv_WindowHandle1, hv_WindowHandle2, hv_WindowHandle3);
      }

      hv_WindowHandle3.Dispose();
      hv_WindowHandle2.Dispose();
      hv_WindowHandle1.Dispose();
      hv_WindowHandle0.Dispose();

      return;
    }
    catch (Exception e)
    {

      hv_WindowHandle3.Dispose();
      hv_WindowHandle2.Dispose();
      hv_WindowHandle1.Dispose();
      hv_WindowHandle0.Dispose();

            throw new Exception("多视图设置失败！原因：" + e.Message);

        }
    }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_Caltab=new HObject(), ho_Marks=new HObject ();

    // Local control variables 

    HTuple hv_ImgPath = new (), hv_ImgPrefix = new ();
    HTuple hv_FileName = new (), hv_Width = new ();
    HTuple hv_Height = new (), hv_Scale = new ();
    HTuple hv_CaltabDescr = new (), hv_CaltabThickness = new ();
    HTuple hv_NumCameras = new (), hv_NumCalibObjects = new ();
    HTuple hv_NumPoses = new (), hv_StartCamPar = new ();
    HTuple hv_CalibDataID = new (), hv_WindowHandles = new ();
    HTuple hv_NumIgnoredImg = new (), hv_PoseIndex = new ();
    HTuple hv_CameraIndex = new (), hv_Message = new ();
    HTuple hv_Color = new (), hv_ShowErrorMsg = new ();
    HTuple hv_Exception = new (), hv_Error = new ();
    HTuple hv_CameraSetupModelID = new (), hv_RefPoseIndex = new ();
    HTuple hv_RefCameraID = new (), hv_PoseCam0Indx0 = new ();
    HTuple hv_ReferencePose = new (), hv_FileExists = new ();
    HTuple hv_ParLabels = new (), hv_CamPar0 = new ();
    HTuple hv_CamPar1 = new (), hv_CamPar2 = new ();
    HTuple hv_CamPar3 = new (), hv_PoseLabels = new ();
    HTuple hv_CamPose0 = new (), hv_CamPose1 = new ();
    HTuple hv_CamPose2 = new (), hv_CamPose3 = new ();
    HTuple hv_X = new (), hv_Y = new (), hv_Z = new ();
    HTuple hv_OM3DCaltab = new (), hv_OM3DsCaltab = new ();
    HTuple hv_i = new (), hv_CaltabPose = new ();
    HTuple hv_ObjectModel3DRigidTrans = new (), hv_CamSetupModel = new ();
    HTuple hv_ObjectModel3DCamera = new (), hv_ObjectModel3DCone = new ();
    HTuple hv_UnionObjectModel3D = new ();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    HOperatorSet.GenEmptyObj(out ho_Marks);
    try
    {
      //This program performs the calibration of a multi-view stereo
      //setup consisting of 4 identical cameras.
      //
      //Set some parameters
      //该程序可对由 4 台相同摄像机组成的多视角立体摄像机进行校准。
      //由 4 台相同的摄像机组成。
      //
      //设置一些参数
      dev_update_off();
      hv_ImgPath.Dispose();
      hv_ImgPath = "3d_machine_vision/multi_view/";
      hv_ImgPrefix.Dispose();
      hv_ImgPrefix = "multi_view_calib_";
      hv_FileName.Dispose();
      using (HDevDisposeHelper dh = new ())
      {
      hv_FileName = (hv_ImgPath+hv_ImgPrefix)+"cam_0_00";
      }
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, hv_FileName);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
      hv_Scale.Dispose();
      hv_Scale = .5;
      //
      //Calibration parameters
      //校准参数
      hv_CaltabDescr.Dispose();
      hv_CaltabDescr = "caltab_100mm.descr";
      hv_CaltabThickness.Dispose();
      hv_CaltabThickness = 0.0064;
      hv_NumCameras.Dispose();
      hv_NumCameras = 4;
      hv_NumCalibObjects.Dispose();
      hv_NumCalibObjects = 1;
      hv_NumPoses.Dispose();
      hv_NumPoses = 20;
      using (HDevDisposeHelper dh = new ())
      {
      hv_StartCamPar.Dispose();
      gen_cam_par_area_scan_polynomial(0.0085, 0.0, 0.0, 0.0, 0.0, 0.0, 6e-6, 6e-6, 
          hv_Width*.5, hv_Height*.5, hv_Width, hv_Height, out hv_StartCamPar);
      }
      //
      //Create camera calibration model and set parameters
      //创建摄像机校准模型并设置参数
      hv_CalibDataID.Dispose();
      HOperatorSet.CreateCalibData("calibration_object", hv_NumCameras, hv_NumCalibObjects, 
          out hv_CalibDataID);
      //Set used camera type
      //设置使用的摄像机类型
      HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, "all", new (), hv_StartCamPar);
      //Set used calibration object
      //设置使用过的校准对象
      HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CaltabDescr);
      //
      //Process the calibration images
      //处理校准图像
      hv_WindowHandles.Dispose();
      open_windows_multi_view_setup(hv_Height, hv_Width, hv_Scale, out hv_WindowHandles);
      hv_NumIgnoredImg.Dispose();
      hv_NumIgnoredImg = 0;
      HTuple end_val39 = hv_NumPoses-1;
      HTuple step_val39 = 1;
      for (hv_PoseIndex=0; hv_PoseIndex.Continue(end_val39, step_val39); hv_PoseIndex = hv_PoseIndex.TupleAdd(step_val39))
      {
        HTuple end_val40 = hv_NumCameras-1;
        HTuple step_val40 = 1;
        for (hv_CameraIndex=0; hv_CameraIndex.Continue(end_val40, step_val40); hv_CameraIndex = hv_CameraIndex.TupleAdd(step_val40))
        {
          hv_FileName.Dispose();
          using (HDevDisposeHelper dh = new ())
          {
          hv_FileName = ((((hv_ImgPath+hv_ImgPrefix)+"cam_")+hv_CameraIndex)+"_")+(hv_PoseIndex.TupleString(
              "02"));
          }
          ho_Image.Dispose();
          HOperatorSet.ReadImage(out ho_Image, hv_FileName);
          //
          HOperatorSet.SetSystem("flush_graphic", "false");
          HDevWindowStack.SetActive(hv_WindowHandles.TupleSelect(
              hv_CameraIndex));
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
          }
          hv_Message.Dispose();
          using (HDevDisposeHelper dh = new ())
          {
          hv_Message = new ();
          hv_Message = hv_Message.TupleConcat("Camera "+hv_CameraIndex);
          hv_Message = hv_Message.TupleConcat("Pose # "+hv_PoseIndex);
          }
          hv_Color.Dispose();
          hv_Color = new ();
          hv_Color[0] = "black";
          hv_Color[1] = "black";
          //Extract observation data
          hv_ShowErrorMsg.Dispose();
          hv_ShowErrorMsg = 0;
          try
          {
            //找到校准表，提取标记并将其存储在校准数据模型中。
            //观测结果存储在校准数据模型中
            //Find the calibration table, extract the marks and store the
            //observation in the calibration data model
            HOperatorSet.FindCalibObject(ho_Image, hv_CalibDataID, hv_CameraIndex, 
                0, hv_PoseIndex, new (), new ());
            //Read the caltab and the marks' contours found for visualization
            //读取校准表和找到的标记轮廓，以实现可视化
            ho_Caltab.Dispose();
            HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, 
                "caltab", hv_CameraIndex, 0, hv_PoseIndex);
            ho_Marks.Dispose();
            HOperatorSet.GetCalibDataObservContours(out ho_Marks, hv_CalibDataID, 
                "marks", hv_CameraIndex, 0, hv_PoseIndex);
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.DispObj(ho_Caltab, HDevWindowStack.GetActive());
            }
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.DispObj(ho_Marks, HDevWindowStack.GetActive());
            }
          }
          // catch (Exception) 
          catch (Exception )
          {
            //HDevExpDefaultException1.ToHTuple(out hv_Exception);
            //If the calibration table or marks were not identified,
            //process the next image. Some missing data is
            //not dramatic since the calibration is robust.
            //如果未识别校准表或标记、
            //处理下一个图像。有些数据丢失
            //因为校准是稳健的。
            hv_ShowErrorMsg.Dispose();
            hv_ShowErrorMsg = 1;
            using (HDevDisposeHelper dh = new ())
            {
            {
            HTuple 
              ExpTmpLocalVar_NumIgnoredImg = hv_NumIgnoredImg+1;
            hv_NumIgnoredImg.Dispose();
            hv_NumIgnoredImg = ExpTmpLocalVar_NumIgnoredImg;
            }
            }
            if ((int)(new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(8402))) != 0)
            {
              //find_calib_object could not find the caltab
              //查找 calib 对象无法找到 caltab
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Message = hv_Message.TupleConcat(
                  "No calibration tab found!");
              hv_Message.Dispose();
              hv_Message = ExpTmpLocalVar_Message;
              }
              }
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Color = hv_Color.TupleConcat(
                  "red");
              hv_Color.Dispose();
              hv_Color = ExpTmpLocalVar_Color;
              }
              }
            }
            else if ((int)(new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                8404))) != 0)
            {
              //find_calib_object could not extract the marks
              //查找 calib 对象无法提取标记
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Message = hv_Message.TupleConcat(
                  "Marks were not identified!");
              hv_Message.Dispose();
              hv_Message = ExpTmpLocalVar_Message;
              }
              }
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Color = hv_Color.TupleConcat(
                  "red");
              hv_Color.Dispose();
              hv_Color = ExpTmpLocalVar_Color;
              }
              }
            }
            else
            {
              //Unknown error occurred
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Message = hv_Message.TupleConcat(
                  "Unknown Exception!.");
              hv_Message.Dispose();
              hv_Message = ExpTmpLocalVar_Message;
              }
              }
              using (HDevDisposeHelper dh = new ())
              {
              {
              HTuple 
                ExpTmpLocalVar_Color = hv_Color.TupleConcat(
                  "red");
              hv_Color.Dispose();
              hv_Color = ExpTmpLocalVar_Color;
              }
              }
            }
            using (HDevDisposeHelper dh = new ())
            {
            {
            HTuple 
              ExpTmpLocalVar_Message = hv_Message.TupleConcat(
                "This image will be ignored.");
            hv_Message.Dispose();
            hv_Message = ExpTmpLocalVar_Message;
            }
            }
            using (HDevDisposeHelper dh = new ())
            {
            {
            HTuple 
              ExpTmpLocalVar_Color = hv_Color.TupleConcat(
                "red");
            hv_Color.Dispose();
            hv_Color = ExpTmpLocalVar_Color;
            }
            }
          }
          using (HDevDisposeHelper dh = new ())
          {
          disp_message(hv_WindowHandles.TupleSelect(hv_CameraIndex), hv_Message, 
              "window", 12, 12, hv_Color, "true");
          }
          if ((int)(hv_ShowErrorMsg) != 0)
          {
            //Show error status
            enforce_visualization(hv_WindowHandles);
            using (HDevDisposeHelper dh = new ())
            {
            disp_continue_message(hv_WindowHandles.TupleSelect(3), "black", "true");
            }
            // stop(...); only in hdevelop
          }
        }
        enforce_visualization(hv_WindowHandles);
      }
      //
      //Perform the calibration if the marks within more than 10
      //images per camera were extracted before
      //如果每台照相机在提取图像之前有超过 10
      //在提取每台相机的图像之前
      if ((int)(new HTuple((((hv_NumPoses*hv_NumCameras)-hv_NumIgnoredImg)).TupleGreaterEqual(
          hv_NumCameras*10))) != 0)
      {
        hv_Error.Dispose();
        HOperatorSet.CalibrateCameras(hv_CalibDataID, out hv_Error);
      }
      else
      {
        hv_Message.Dispose();
        hv_Message = "Too few marks were provided!";
        if (hv_Message == null)
          hv_Message = new ();
        hv_Message[1] = "Please adapt the parameters for";
        if (hv_Message == null)
          hv_Message = new ();
        hv_Message[2] = "extraction of the marks or provide";
        if (hv_Message == null)
          hv_Message = new ();
        hv_Message[3] = "more images with better quality.";
        hv_Color.Dispose();
        hv_Color = new ();
        hv_Color[0] = "red";
        hv_Color[1] = "black";
        hv_Color[2] = "black";
        hv_Color[3] = "black";
        using (HDevDisposeHelper dh = new ())
        {
        disp_message(hv_WindowHandles.TupleSelect(0), hv_Message, "window", 12, 12, 
            hv_Color, "true");
        }
        ho_Image.Dispose();
        ho_Caltab.Dispose();
        ho_Marks.Dispose();

        hv_ImgPath.Dispose();
        hv_ImgPrefix.Dispose();
        hv_FileName.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_Scale.Dispose();
        hv_CaltabDescr.Dispose();
        hv_CaltabThickness.Dispose();
        hv_NumCameras.Dispose();
        hv_NumCalibObjects.Dispose();
        hv_NumPoses.Dispose();
        hv_StartCamPar.Dispose();
        hv_CalibDataID.Dispose();
        hv_WindowHandles.Dispose();
        hv_NumIgnoredImg.Dispose();
        hv_PoseIndex.Dispose();
        hv_CameraIndex.Dispose();
        hv_Message.Dispose();
        hv_Color.Dispose();
        hv_ShowErrorMsg.Dispose();
        hv_Exception.Dispose();
        hv_Error.Dispose();
        hv_CameraSetupModelID.Dispose();
        hv_RefPoseIndex.Dispose();
        hv_RefCameraID.Dispose();
        hv_PoseCam0Indx0.Dispose();
        hv_ReferencePose.Dispose();
        hv_FileExists.Dispose();
        hv_ParLabels.Dispose();
        hv_CamPar0.Dispose();
        hv_CamPar1.Dispose();
        hv_CamPar2.Dispose();
        hv_CamPar3.Dispose();
        hv_PoseLabels.Dispose();
        hv_CamPose0.Dispose();
        hv_CamPose1.Dispose();
        hv_CamPose2.Dispose();
        hv_CamPose3.Dispose();
        hv_X.Dispose();
        hv_Y.Dispose();
        hv_Z.Dispose();
        hv_OM3DCaltab.Dispose();
        hv_OM3DsCaltab.Dispose();
        hv_i.Dispose();
        hv_CaltabPose.Dispose();
        hv_ObjectModel3DRigidTrans.Dispose();
        hv_CamSetupModel.Dispose();
        hv_ObjectModel3DCamera.Dispose();
        hv_ObjectModel3DCone.Dispose();
        hv_UnionObjectModel3D.Dispose();

        return;
      }
      //
      //Create a camera setup model and define a suitable world
      //coordinate system
      //创建摄像机设置模型并定义合适的世界
      //坐标系
      hv_CameraSetupModelID.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "model", "general", "camera_setup_model", 
          out hv_CameraSetupModelID);
      //-> The world coordinate system will be implicitly defined
      //   by the position of the calibration table in the
      //   calibration image with the pose index 0
      //-> 世界坐标系将隐式定义
      //由校准表在校准图像中的位置隐式定义。
      //姿态索引为 0 的校准图像
      hv_RefPoseIndex.Dispose();
      hv_RefPoseIndex = 0;
      hv_RefCameraID.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "model", "general", "reference_camera", 
          out hv_RefCameraID);
      using (HDevDisposeHelper dh = new ())
      {
      hv_PoseCam0Indx0.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "calib_obj_pose", (new HTuple(0)).TupleConcat(
          hv_RefPoseIndex), "pose", out hv_PoseCam0Indx0);
      }
      hv_ReferencePose.Dispose();
      HOperatorSet.SetOriginPose(hv_PoseCam0Indx0, 0, 0, hv_CaltabThickness, out hv_ReferencePose);
      //-> Modify the reference coordinate system within the
      //   camera setup model and write the model to file
      //-> 在摄像机设置模型中修改参考坐标系，并将模型写入文件。
      //相机设置模型，并将模型写入文件
      HOperatorSet.SetCameraSetupParam(hv_CameraSetupModelID, "general", "coord_transf_pose", 
          hv_ReferencePose);
      hv_FileExists.Dispose();
      HOperatorSet.FileExists("four_camera_setup_model.csm", out hv_FileExists);
      if ((int)(hv_FileExists.TupleNot()) != 0)
      {
        HOperatorSet.WriteCameraSetupModel(hv_CameraSetupModelID, "four_camera_setup_model.csm");
      }
      //
      //Get the results of the calibration
      //-> Camera parameters
      //获取校准结果
      //相机参数
      hv_ParLabels.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "camera", 0, "params_labels", out hv_ParLabels);
      hv_CamPar0.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 0, "params", out hv_CamPar0);
      hv_CamPar1.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 1, "params", out hv_CamPar1);
      hv_CamPar2.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 2, "params", out hv_CamPar2);
      hv_CamPar3.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 3, "params", out hv_CamPar3);
      //-> Camera poses
      //-> 相机姿势
      hv_PoseLabels.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "camera", 0, "pose_labels", out hv_PoseLabels);
      hv_CamPose0.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 0, "pose", out hv_CamPose0);
      hv_CamPose1.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 1, "pose", out hv_CamPose1);
      hv_CamPose2.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 2, "pose", out hv_CamPose2);
      hv_CamPose3.Dispose();
      HOperatorSet.GetCameraSetupParam(hv_CameraSetupModelID, 3, "pose", out hv_CamPose3);
      //
      //Display the results
      //-> First, display the camera parameters
      //显示结果
      //-> 首先，显示摄像机参数
      disp_camera_parameters_multi_view_4(hv_WindowHandles, hv_ParLabels, hv_CamPar0, 
          hv_CamPar1, hv_CamPar2, hv_CamPar3);
      using (HDevDisposeHelper dh = new ())
      {
      disp_continue_message(hv_WindowHandles.TupleSelect(3), "black", "true");
      }
      // stop(...); only in hdevelop
      //-> Now, display the poses
      disp_camera_poses_multi_view_4(hv_WindowHandles, hv_PoseLabels, hv_CamPose0, 
          hv_CamPose1, hv_CamPose2, hv_CamPose3);
      //
      //In the following, the determined poses are visualized.
      hv_X.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "calib_obj", 0, "x", out hv_X);
      hv_Y.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "calib_obj", 0, "y", out hv_Y);
      hv_Z.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "calib_obj", 0, "z", out hv_Z);
      hv_OM3DCaltab.Dispose();
      HOperatorSet.GenObjectModel3dFromPoints(hv_X, hv_Y, hv_Z, out hv_OM3DCaltab);
      hv_OM3DsCaltab.Dispose();
      hv_OM3DsCaltab = new ();
      HTuple end_val175 = hv_NumPoses-1;
      HTuple step_val175 = 1;
      for (hv_i=1; hv_i.Continue(end_val175, step_val175); hv_i = hv_i.TupleAdd(step_val175))
      {
        using (HDevDisposeHelper dh = new ())
        {
        hv_CaltabPose.Dispose();
        HOperatorSet.GetCalibData(hv_CalibDataID, "calib_obj_pose", (new HTuple(0)).TupleConcat(
            hv_i), "pose", out hv_CaltabPose);
        }
        hv_ObjectModel3DRigidTrans.Dispose();
        HOperatorSet.RigidTransObjectModel3d(hv_OM3DCaltab, hv_CaltabPose, out hv_ObjectModel3DRigidTrans);
        using (HDevDisposeHelper dh = new ())
        {
        {
        HTuple 
          ExpTmpLocalVar_OM3DsCaltab = hv_OM3DsCaltab.TupleConcat(
            hv_ObjectModel3DRigidTrans);
        hv_OM3DsCaltab.Dispose();
        hv_OM3DsCaltab = ExpTmpLocalVar_OM3DsCaltab;
        }
        }
      }
      hv_CamSetupModel.Dispose();
      HOperatorSet.GetCalibData(hv_CalibDataID, "model", "general", "camera_setup_model", 
          out hv_CamSetupModel);
      hv_ObjectModel3DCamera.Dispose();hv_ObjectModel3DCone.Dispose();
      gen_camera_setup_object_model_3d(hv_CamSetupModel, 0.05, "auto", out hv_ObjectModel3DCamera, 
          out hv_ObjectModel3DCone);

      //////
      using (HDevDisposeHelper dh = new ())
      {
      hv_UnionObjectModel3D.Dispose();
      HOperatorSet.UnionObjectModel3d(hv_ObjectModel3DCamera.TupleConcat(hv_ObjectModel3DCone), 
          "points_surface", out hv_UnionObjectModel3D);
      }
      // dev_inspect_ctrl(...); only in hdevelop
      // stop(...); only in hdevelop
      //
    }
    catch (Exception e)
    {
      ho_Image.Dispose();
      ho_Caltab.Dispose();
      ho_Marks.Dispose();

      hv_ImgPath.Dispose();
      hv_ImgPrefix.Dispose();
      hv_FileName.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_Scale.Dispose();
      hv_CaltabDescr.Dispose();
      hv_CaltabThickness.Dispose();
      hv_NumCameras.Dispose();
      hv_NumCalibObjects.Dispose();
      hv_NumPoses.Dispose();
      hv_StartCamPar.Dispose();
      hv_CalibDataID.Dispose();
      hv_WindowHandles.Dispose();
      hv_NumIgnoredImg.Dispose();
      hv_PoseIndex.Dispose();
      hv_CameraIndex.Dispose();
      hv_Message.Dispose();
      hv_Color.Dispose();
      hv_ShowErrorMsg.Dispose();
      hv_Exception.Dispose();
      hv_Error.Dispose();
      hv_CameraSetupModelID.Dispose();
      hv_RefPoseIndex.Dispose();
      hv_RefCameraID.Dispose();
      hv_PoseCam0Indx0.Dispose();
      hv_ReferencePose.Dispose();
      hv_FileExists.Dispose();
      hv_ParLabels.Dispose();
      hv_CamPar0.Dispose();
      hv_CamPar1.Dispose();
      hv_CamPar2.Dispose();
      hv_CamPar3.Dispose();
      hv_PoseLabels.Dispose();
      hv_CamPose0.Dispose();
      hv_CamPose1.Dispose();
      hv_CamPose2.Dispose();
      hv_CamPose3.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_OM3DCaltab.Dispose();
      hv_OM3DsCaltab.Dispose();
      hv_i.Dispose();
      hv_CaltabPose.Dispose();
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_CamSetupModel.Dispose();
      hv_ObjectModel3DCamera.Dispose();
      hv_ObjectModel3DCone.Dispose();
      hv_UnionObjectModel3D.Dispose();

            throw new Exception("失败！原因：" + e.Message);

        }
        ho_Image.Dispose();
    ho_Caltab.Dispose();
    ho_Marks.Dispose();

    hv_ImgPath.Dispose();
    hv_ImgPrefix.Dispose();
    hv_FileName.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_Scale.Dispose();
    hv_CaltabDescr.Dispose();
    hv_CaltabThickness.Dispose();
    hv_NumCameras.Dispose();
    hv_NumCalibObjects.Dispose();
    hv_NumPoses.Dispose();
    hv_StartCamPar.Dispose();
    hv_CalibDataID.Dispose();
    hv_WindowHandles.Dispose();
    hv_NumIgnoredImg.Dispose();
    hv_PoseIndex.Dispose();
    hv_CameraIndex.Dispose();
    hv_Message.Dispose();
    hv_Color.Dispose();
    hv_ShowErrorMsg.Dispose();
    hv_Exception.Dispose();
    hv_Error.Dispose();
    hv_CameraSetupModelID.Dispose();
    hv_RefPoseIndex.Dispose();
    hv_RefCameraID.Dispose();
    hv_PoseCam0Indx0.Dispose();
    hv_ReferencePose.Dispose();
    hv_FileExists.Dispose();
    hv_ParLabels.Dispose();
    hv_CamPar0.Dispose();
    hv_CamPar1.Dispose();
    hv_CamPar2.Dispose();
    hv_CamPar3.Dispose();
    hv_PoseLabels.Dispose();
    hv_CamPose0.Dispose();
    hv_CamPose1.Dispose();
    hv_CamPose2.Dispose();
    hv_CamPose3.Dispose();
    hv_X.Dispose();
    hv_Y.Dispose();
    hv_Z.Dispose();
    hv_OM3DCaltab.Dispose();
    hv_OM3DsCaltab.Dispose();
    hv_i.Dispose();
    hv_CaltabPose.Dispose();
    hv_ObjectModel3DRigidTrans.Dispose();
    hv_CamSetupModel.Dispose();
    hv_ObjectModel3DCamera.Dispose();
    hv_ObjectModel3DCone.Dispose();
    hv_UnionObjectModel3D.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif


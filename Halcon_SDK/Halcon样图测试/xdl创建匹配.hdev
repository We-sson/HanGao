<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">read_image (Image, 'C:/Users/H/Desktop/Sample_Image/135_Pre/0.tiff')</l>
<c></c>
<l>* read_cam_par ('C:/Users/zhiwei2.he/Desktop/图片/1.cal', CameraParameters)</l>
<l>* read_pose ('C:/Users/zhiwei2.he/Desktop/图片/1.dat', CameraPose)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,1]" as_ord="1">*open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'c42f90f24196_Hikvision_MVCA06010GM', 0, -1, AcqHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">*grab_image_start (AcqHandle, -1)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">*grab_image_async (Image, AcqHandle, -1)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">* Image Acquisition 01: Do something</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[4,1]" as_ord="1">*close_framegrabber (AcqHandle)</l>
<c></c>
<c></c>
<c></c>
<c>*模板位置名称</c>
<l>Name:='45_1'</l>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width*0.3, Height*0.3, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<c></c>
<c>*新建空模板</c>
<l>gen_empty_obj (ModelsXld)</l>
<c></c>
<c></c>
<c></c>
<c>* 设置圆的宽度</c>
<l>dev_set_line_width (2)</l>
<c></c>
<c></c>
<c></c>
<l>Button := -1</l>
<l>key:=''</l>
<l>RowLine := []</l>
<l>ColLine := []</l>
<l>dev_set_color ('red')</l>
<c></c>
<c>* Select points of a lines</c>
<c>* Use right button to end input</c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>while (true)</l>
<l>    Message[2] := '(选择添加特征还是创建模型: N 添加 , S 创建模型)'</l>
<l>    disp_message (WindowHandle, Message, 'image', 12, 12, 'black', 'true') </l>
<c>    </c>
<l>    read_char (WindowHandle, Char, Code)</l>
<c>    </c>
<l>    if (Char=='n')</l>
<c>        </c>
<c>        </c>
<l>        Message[2] := '(图片上点击轮廓边缘)'</l>
<l>        disp_message (WindowHandle, Message, 'image', 12, 12, 'black', 'true')</l>
<c>        </c>
<l>        while (Button != 4)</l>
<l>            get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>            if (Button != 4)</l>
<c>                *显示十字架</c>
<l>                gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>                dev_display (Cross)</l>
<l>                RowLine := [RowLine,Row]</l>
<l>                ColLine := [ColLine,Column]</l>
<l>            endif</l>
<l>        endwhile</l>
<c>        *根据位置点生产轮廓线</c>
<l>        gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c>        *清除鼠标状态数据状态</c>
<l>        Button := -1</l>
<l>        RowLine := []</l>
<l>        ColLine := []</l>
<l>        Message[2] := '(键盘输入数据类型:L 直线,C 圆弧 E 退出)'</l>
<l>        disp_message (WindowHandle, Message, 'image', 12, 12, 'black', 'true')</l>
<c>        </c>
<l>        read_char (WindowHandle, Char, Code)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        if (Char=='l')</l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            *拟合直线</c>
<l>            fit_line_contour_xld (Contour1, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>            *显示xld直线</c>
<l>            gen_contour_polygon_xld (Line1, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<c>            </c>
<c>            </c>
<l>            concat_obj (ModelsXld, Line1, ModelsXld)</l>
<c>            </c>
<c>            </c>
<l>        elseif (Char=='c')</l>
<c>            </c>
<c>            </c>
<c>            *拟合直线</c>
<l>            fit_circle_contour_xld (Contour1, 'atukey', -1, 2, 0, 3, 2, Row5, Column5, Radius1, StartPhi1, EndPhi1, PointOrder1)</l>
<c>            *显示xld圆弧</c>
<l>            gen_circle_contour_xld (ContCircle2, Row5, Column5, Radius1, StartPhi1, EndPhi1, PointOrder1,1)</l>
<c>            </c>
<c>            </c>
<c>            </c>
<l>            concat_obj (ModelsXld, ContCircle2, ModelsXld)</l>
<c>            </c>
<c>            </c>
<c>            </c>
<l>        elseif  (Char=='e')</l>
<c>            </c>
<l>            break</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    elseif (Char=='s')</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        write_object (ModelsXld, 'C:/Users/H/Desktop/Sample_Image/45_Xld')</l>
<l>         * read_shape_model (Name+'_ModelID_aniso.shm', ModelID_aniso)</l>
<l>         *get_shape_model_contours (ModelsXld, ModelID_aniso, 1)</l>
<l>           read_deformable_model ('H:/ShapeModel/1_F_135_1.dfm', ModelID1_deformed)</l>
<l>       get_deformable_model_contours (ModelsXld, ModelID1_deformed, 1)</l>
<l>        create_shape_model_xld                      (ModelsXld, 'auto',rad(-180), rad(360), 'auto', 'auto', 'ignore_local_polarity', 10, ModelID_template)</l>
<c>        </c>
<l>        create_planar_uncalib_deformable_model_xld  (ModelsXld, 'auto', rad(-10), rad(10), 'auto', 1, 1, 'auto', 1, 1, 'auto', 'auto', 'ignore_local_polarity', 10, 'part_size', 'big', ModelID_deformed)</l>
<c>        </c>
<c>        </c>
<l>        create_local_deformable_model_xld           (ModelsXld, 'auto', rad(-180), rad(360), 0.0175, 1, 1, 'auto', 1, 1, 'auto', 'auto', 'ignore_local_polarity', 10, [], [], ModelID1_deformed)</l>
<c>        </c>
<l>        create_scaled_shape_model_xld                (ModelsXld, 'auto',  rad(-180), rad(360), 'auto', 0.8, 1.2, 'auto', 'auto', 'ignore_local_polarity', 10, ModelID_zoom)</l>
<c>        </c>
<l>        create_aniso_shape_model_xld (ModelsXld, 'auto',  rad(-5), rad(5), 'auto', 0.9, 1.1, 'auto', 0.9, 1.1, 'auto', 'no_pregeneration', 'ignore_local_polarity', 10, ModelID_aniso)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        *查看模板参数</c>
<l>        get_shape_model_contours (ModelContours, ModelID_template, 1)</l>
<c>        </c>
<l>        get_deformable_model_contours (ModelContours1, ModelID_deformed, 1)</l>
<c>        </c>
<l>        get_deformable_model_contours (ModelContours2, ModelID1_deformed, 1)</l>
<c>        </c>
<l>        get_shape_model_contours (ModelContours3, ModelID_zoom,1)</l>
<l>        get_shape_model_contours (ModelContours4, ModelID_aniso, 1)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        *保存模板</c>
<l>        write_deformable_model (ModelID_deformed, Name+'_ModelID_deformed.dfm')</l>
<l>        write_shape_model (ModelID_zoom, Name+'_ModelID_zoom.shm')</l>
<l>        write_shape_model (ModelID_template, Name+'_ModelID_template.shm')</l>
<l>        write_deformable_model (ModelID1_deformed, Name+'_ModelID1_deformed.dfm')</l>
<l>        write_shape_model (ModelID_aniso, Name+'_ModelID_aniso.shm')</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        break</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* stop()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* while (Button != 4)</l>
<l>* get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>* if (Button != 4)</l>
<c>*显示十字架</c>
<l>* gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>* dev_display (Cross)</l>
<l>* RowLine := [RowLine,Row]</l>
<l>* ColLine := [ColLine,Column]</l>
<l>* endif</l>
<l>* endwhile</l>
<c>*根据位置点生产轮廓线</c>
<l>* gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c>*拟合直线</c>
<l>* fit_line_contour_xld (Contour1, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>*显示xld直线</c>
<l>* gen_contour_polygon_xld (Line1, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<c></c>
<c></c>
<l>* concat_obj (ModelsXld, Line1, ModelsXld)</l>
<c></c>
<l>* stop()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*----------------------------</c>
<c></c>
<c></c>
<c></c>
<l>* Button := -1</l>
<l>* RowLine := []</l>
<l>* ColLine := []</l>
<l>* dev_set_color ('red')</l>
<l>* Message[2] := '(画直线模板)'</l>
<l>* disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<c>* Select points of a lines</c>
<c>* Use right button to end input</c>
<l>* while (Button != 4)</l>
<l>* get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>* if (Button != 4)</l>
<c>*显示十字架</c>
<l>* gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>* dev_display (Cross)</l>
<l>* RowLine := [RowLine,Row]</l>
<l>* ColLine := [ColLine,Column]</l>
<l>* endif</l>
<l>* endwhile</l>
<c>*根据位置点生产轮廓线</c>
<l>* gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c></c>
<c>*拟合直线</c>
<l>* fit_circle_contour_xld (Contour1, 'atukey', -1, 2, 0, 3, 2, Row5, Column5, Radius1, StartPhi1, EndPhi1, PointOrder1)</l>
<c>*显示xld圆弧</c>
<l>* gen_circle_contour_xld (ContCircle2, Row5, Column5, Radius1, StartPhi1, EndPhi1, PointOrder1,1)</l>
<c></c>
<c></c>
<c></c>
<l>* concat_obj (ModelsXld, ContCircle2, ModelsXld)</l>
<c></c>
<c></c>
<l>* stop()</l>
<c></c>
<c></c>
<c></c>
<l>* Button := -1</l>
<l>* RowLine := []</l>
<l>* ColLine := []</l>
<l>* dev_set_color ('red')</l>
<l>* Message[2] := '(Right click to end)'</l>
<l>* disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<c>* Select points of a lines</c>
<c>* Use right button to end input</c>
<l>* while (Button != 4)</l>
<l>* get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>* if (Button != 4)</l>
<c>*显示十字架</c>
<l>* gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>* dev_display (Cross)</l>
<l>* RowLine := [RowLine,Row]</l>
<l>* ColLine := [ColLine,Column]</l>
<l>* endif</l>
<l>* endwhile</l>
<c>*根据位置点生产轮廓线</c>
<l>* gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c>*拟合直线</c>
<l>* fit_line_contour_xld (Contour1, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>*显示xld直线</c>
<l>* gen_contour_polygon_xld (Line2, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<c></c>
<c>*合并对象</c>
<l>* concat_obj (ModelsXld, Line2, ModelsXld)</l>
<c></c>
<l>* stop()</l>
<c></c>
<c></c>
<l>* Button := -1</l>
<l>* RowLine := []</l>
<l>* ColLine := []</l>
<l>* dev_set_color ('red')</l>
<l>* Message[2] := '(Right click to end)'</l>
<l>* disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<c>* Select points of a lines</c>
<c>* Use right button to end input</c>
<l>* while (Button != 4)</l>
<l>* get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>* if (Button != 4)</l>
<c>*显示十字架</c>
<l>* gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>* dev_display (Cross)</l>
<l>* RowLine := [RowLine,Row]</l>
<l>* ColLine := [ColLine,Column]</l>
<l>* endif</l>
<l>* endwhile</l>
<c>*根据位置点生产轮廓线</c>
<l>* gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c>*拟合直线</c>
<l>* fit_line_contour_xld (Contour1, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>*显示xld直线</c>
<l>* gen_contour_polygon_xld (Line4, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<c></c>
<c></c>
<l>* concat_obj (ModelsXld, Line4, ModelsXld)</l>
<c></c>
<l>* stop()</l>
<c></c>
<c></c>
<l>* Button := -1</l>
<l>* RowLine := []</l>
<l>* ColLine := []</l>
<l>* dev_set_color ('red')</l>
<l>* Message[2] := '(Right click to end)'</l>
<l>* disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<c>* Select points of a lines</c>
<c>* Use right button to end input</c>
<l>* while (Button != 4)</l>
<l>* get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>* if (Button != 4)</l>
<c>*显示十字架</c>
<l>* gen_cross_contour_xld (Cross, Row, Column, 20, 0.785398)</l>
<l>* dev_display (Cross)</l>
<l>* RowLine := [RowLine,Row]</l>
<l>* ColLine := [ColLine,Column]</l>
<l>* endif</l>
<l>* endwhile</l>
<c>*根据位置点生产轮廓线</c>
<l>* gen_contour_polygon_xld (Contour1, RowLine, ColLine)</l>
<c>*拟合直线</c>
<l>* fit_line_contour_xld (Contour1, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>*显示xld直线</c>
<l>* gen_contour_polygon_xld (Line5, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<c></c>
<c></c>
<l>* concat_obj (ModelsXld, Line5, ModelsXld)</l>
<c></c>
<l>* stop()</l>
<c></c>
<c>*连接线段之间</c>
<l>* union_adjacent_contours_xld (ModelsXld, UnionContours, 100, 1, 'attr_forget')</l>
<c>*-----------------------------</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*创建模板</c>
<l>* create_shape_model_xld                      (ModelsXld, 'auto',rad(-180), rad(360), 'auto', 'auto', 'ignore_local_polarity', 10, ModelID_template)</l>
<c></c>
<l>* create_planar_uncalib_deformable_model_xld  (ModelsXld, 'auto', rad(-180), rad(360), 'auto', 0.8, 1.2, 'auto', 0.8, 1.2, 'auto', 'auto', 'ignore_local_polarity', 10, [], [], ModelID_deformed)</l>
<c></c>
<c></c>
<l>* create_local_deformable_model_xld           (ModelsXld, 'auto', rad(-180), rad(360), 'auto', 0.8, 1.2, 'auto', 0.8, 1.2, 'auto', 'auto', 'ignore_local_polarity', 10, [], [], ModelID1_deformed)</l>
<c></c>
<l>* create_scaled_shape_model_xld                (ModelsXld, 'auto',  rad(-180), rad(360), 'auto', 0.8, 1.2, 'auto', 'auto', 'ignore_local_polarity', 10, ModelID_zoom)</l>
<c></c>
<l>* create_aniso_shape_model_xld (ModelsXld, 'auto',  rad(-180), rad(360), 'auto', 0.8, 1.2, 'auto', 0.8, 1.2, 'auto', 'auto', 'ignore_local_polarity', 10, ModelID_aniso)</l>
<c></c>
<c></c>
<c>*获得模板参数</c>
<l>* get_shape_model_contours (ModelContours, ModelID_template, 3)</l>
<c></c>
<l>* get_deformable_model_contours (ModelContours1, ModelID_deformed, 3)</l>
<l>* get_deformable_model_params (ModelID_deformed, 'num_levels', GenParamValue)</l>
<l>* get_deformable_model_contours (ModelContours2, ModelID1_deformed, 3)</l>
<c></c>
<l>* get_shape_model_contours (ModelContours3, ModelID_zoom,3)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*保存模板</c>
<l>* write_deformable_model (ModelID_deformed, Name+'_ModelID_deformed.dfm')</l>
<l>* write_shape_model (ModelID_zoom, Name+'_ModelID_zoom.shm')</l>
<l>* write_shape_model (ModelID_template, Name+'_ModelID_template.shm')</l>
<l>* write_deformable_model (ModelID1_deformed, Name+'_ModelID1_deformed.dfm')</l>
<l>* write_shape_model (ModelID_aniso, Name+'_ModelID_aniso.shm')</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>

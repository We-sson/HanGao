<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="2">* Matching 01: ************************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="3">* Matching 01: BEGIN of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="4">* Matching 01: ************************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="5">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1]" as_ord="1">* Matching 01: Read the shape model from file</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1]" as_ord="2">read_shape_model ('C:/Users/H/Desktop/图片/45_ModelID_aniso.shm', ModelID)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="2">* Matching 01: Get the model contour for transforming it later into the image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="3">get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="2">* Matching 01: Support for displaying the model</c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="3">* Matching 01: Set a reference position to show the model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="4">smallest_rectangle1_xld (ModelContours, Row1, Column1, Row2, Column2)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="5">RefRow := (max(Row2)-min(Row1))/2</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="6">RefColumn := (max(Column2)-min(Column1))/2</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="7">vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="8">affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="9">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="10">* Matching 01: Display the model contours</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="11">dev_set_color ('green')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="12">dev_set_draw ('margin')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="13">dev_display (TransContours)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,4]" as_ord="14">stop ()</l>
<c as_id="matching" as_name="Matching 01" as_grp="[2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[2]" as_ord="2">* Matching 01: END of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 01" as_grp="[3,1]" as_ord="1">* Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *</c>
<c as_id="matching" as_name="Matching 01" as_grp="[3,1]" as_ord="2">* Matching 01: BEGIN of generated code for model application</c>
<c as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="1">* Matching 01: Set the search paramaters</c>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="2">set_generic_shape_model_param (ModelID, 'angle_start', rad(-20))</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="3">set_generic_shape_model_param (ModelID, 'angle_end', rad(15))</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="4">set_generic_shape_model_param (ModelID, 'max_deformation', 10)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="5">set_generic_shape_model_param (ModelID, 'min_score', 0.7)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="6">set_generic_shape_model_param (ModelID, 'num_matches', 1)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="7">set_generic_shape_model_param (ModelID, 'border_shape_models', 'true')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="8">set_generic_shape_model_param (ModelID, 'greediness', 1)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="9">set_generic_shape_model_param (ModelID, 'pyramid_level_lowest', 2)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="10">set_generic_shape_model_param (ModelID, 'pyramid_level_robust_tracking', 'true')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[3,2]" as_ord="11">set_generic_shape_model_param (ModelID, 'timeout', 10000)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="2">* Matching 01: Loop over all specified test images</c>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="3">TestImages := ['C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100035048.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100056918.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100111355.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100133806.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100210350.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100227179.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100248299.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100310361.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100329274.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100346044.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100400552.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100503485.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100517937.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100531565.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100642793.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100649702.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100838646.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100846627.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100853376.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100902158.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100909131.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100948582.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100955624.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216100959871.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101006165.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101011353.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101017643.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101022483.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101034927.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101041631.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101047911.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101133181.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101138977.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101143588.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101148311.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101153700.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101158652.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101204343.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101209430.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101215000.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101219852.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101227375.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101351484.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101356739.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101401776.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101406497.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101412801.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101417852.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101426561.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101432043.bmp','C:/Users/H/Desktop/图片/深度学习案例/Data/Image_20230216101439511.bmp']</l>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="4">for T := 0 to 50 by 1</l>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="2">    * Matching 01: Obtain the test image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="3">    read_image (Image, TestImages[T])</l>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="1">    *</c>
<c>    </c>
<l>     scale_image_max (Image, ImageScaleMax)</l>
<c>    </c>
<c>   </c>
<c></c>
<l>    median_image (ImageScaleMax, ImageMedian1, 'circle', 0.5, 'mirrored')</l>
<c>      </c>
<c></c>
<l>    emphasize (ImageScaleMax, ImageEmphasize, 20, 20, 10)</l>
<l>    gray_opening_rect (ImageEmphasize, ImageOpening, 8, 6)</l>
<l>    gray_closing_rect (ImageOpening, ImageClosing, 6, 6)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="2">    * Matching 01: Find the model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="3">    find_generic_shape_model (ImageMedian1, ModelID, MatchResultID, NumMatchResult)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="2">    * Matching 01: Display the detected matches</c>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="3">    dev_display (Image)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="4">    for I := 0 to NumMatchResult-1 by 1</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="5">        get_generic_shape_model_result_object (MatchContour, MatchResultID, I, 'contours')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="6">        dev_set_color ('green')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="7">        dev_display (MatchContour)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="8">        stop ()</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="9">    endfor</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="2">    * Matching 01: Code for alignment of e.g., measurements</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,2]" as_ord="1">    for I := 0 to NumMatchResult-1 by 1</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="1">        * Matching 01: Retrieve a hom_mat2d for each of the matching results</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="2">        * Matching 01: Retrieve the matching results</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="3">        get_generic_shape_model_result (MatchResultID, I, 'hom_mat_2d', HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="4">        hom_mat2d_identity (AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="1">        hom_mat2d_translate (AlignmentHomMat2D, -RefRow, -RefColumn, AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="2">        hom_mat2d_compose (HomMat2D, AlignmentHomMat2D, AlignmentHomMat2D)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="1">        * Matching 01: Insert your code using the alignment here, e.g., code generated by</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="2">        * Matching 01: the measure assistant with the code generation option</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="3">        * Matching 01: 'Alignment Method' set to 'Affine Transformation'.</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,6]" as_ord="1">    endfor</l>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="2">    * Matching 01: Code for rectification of the image</c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="3">    * Matching 01: Calculate the hom_mat2d for the model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="4">    hom_mat2d_identity (HomMat2DModel)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="5">    hom_mat2d_translate (HomMat2DModel, RefRow, RefColumn, HomMat2DModel)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,2]" as_ord="1">    for I := 0 to NumMatchResult-1 by 1</l>
<c as_id="matching" as_name="Matching 01" as_grp="[9,3]" as_ord="1">        * Matching 01: Calculate an inverse hom_mat2d for each of the matching results</c>
<l as_id="matching" as_name="Matching 01" as_grp="[9,3]" as_ord="2">        get_generic_shape_model_result (MatchResultID, I, 'hom_mat_2d', HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,4]" as_ord="1">        hom_mat2d_invert (HomMat2D, HomMat2DMatchInvert)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,4]" as_ord="2">        hom_mat2d_compose (HomMat2DModel, HomMat2DMatchInvert, RectificationHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,5]" as_ord="1">        affine_trans_image (Image, RectifiedImage, RectificationHomMat2D, 'constant', 'false')</l>
<c as_id="matching" as_name="Matching 01" as_grp="[9,6]" as_ord="1">        * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,6]" as_ord="2">        * Matching 01: Insert your code using the rectified image here</c>
<l as_id="matching" as_name="Matching 01" as_grp="[9,7]" as_ord="1">    endfor</l>
<l as_id="matching" as_name="Matching 01" as_grp="[10]" as_ord="1">endfor</l>
<c as_id="matching" as_name="Matching 01" as_grp="[11]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="1">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="2">* Matching 01: END of generated code for model application</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="3">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="4">* </c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*----------------------------局部变形---------------------------</c>
<c>* </c>
<c>* Matching 01: ************************************************</c>
<c>* Matching 01: BEGIN of generated code for model initialization</c>
<c>* Matching 01: ************************************************</c>
<c>* </c>
<c>* Matching 01: Initialize acquisition</c>
<l>open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'c42f90f24196_Hikvision_MVCA06010GM', 0, -1, AcqHandle)</l>
<c>* </c>
<c>* Matching 01: Read the deformable model from file</c>
<l>read_deformable_model ('C:/Users/H/Desktop/图片/45_1_ModelID_deformed.dfm', ModelID)</l>
<c>* </c>
<c>* Matching 01: Get the model contour for transforming it later into the image</c>
<l>get_deformable_model_contours (ModelContours, ModelID, 1)</l>
<c>* </c>
<c>* Matching 01: Set a reference position to show the model</c>
<l>smallest_rectangle1_xld (ModelContours, Row1, Column1, Row2, Column2)</l>
<l>RefRow := (max(Row2)-min(Row1))/2</l>
<l>RefColumn := (max(Column2)-min(Column1))/2</l>
<l>vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c>* </c>
<c>* Matching 01: Display the model contours</c>
<l>dev_set_color ('green')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (TransContours)</l>
<l>stop ()</l>
<c>* </c>
<c>* Matching 01: END of generated code for model initialization</c>
<c>* Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *</c>
<c>* Matching 01: BEGIN of generated code for model application</c>
<c>* </c>
<l>while (true)</l>
<c>    * </c>
<c>    * Matching 01: Obtain the image</c>
<l>    grab_image (Image, AcqHandle)</l>
<c>    * </c>
<c>    * Matching 01: Find the model</c>
<l>    find_planar_uncalib_deformable_model (Image, ModelID, rad(-5), rad(5), 1, 1, 1, 1, 0.73, 1, 0, 3, 0.9, ['subpixel'], ['least_squares'], ResultHomMat2D, Score)</l>
<c>    * </c>
<c>    * Matching 01: Transform the model contours into the detected positions</c>
<l>    dev_display (Image)</l>
<l>    for I := 0 to |Score| - 1 by 1</l>
<l>        TempHomMat2D := ResultHomMat2D[I*9:I*9+8]</l>
<l>        projective_trans_contour_xld (ModelContours, TransContours, TempHomMat2D)</l>
<l>        dev_set_color ('green')</l>
<l>        dev_display (TransContours)</l>
<l>        stop ()</l>
<l>    endfor</l>
<c></c>
<l>endwhile</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>

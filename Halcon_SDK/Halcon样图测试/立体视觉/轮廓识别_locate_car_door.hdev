<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows an application case from the automotive industry.</c>
<c>* The task is to locate a car door put in different orientations and</c>
<c>* positions by using the calibrated deformable matching. First,</c>
<c>* a model is defined from a planar area of the car door, then a</c>
<c>* calibrated pose is calculated from the calibration plate put in the</c>
<c>* plane of the initial object. For all subsequent takes the pose</c>
<c>* can then be determined using the deformable matching.</c>
<c>* It is important to note that the perspective matching can only be used</c>
<c>* for planar areas of your object of interest that consist of well defined contours.</c>
<c>* Further a stable detection requires a perspective distortion of the object.</c>
<c>* Hence if the object is very far away or the camera has a long focal length,</c>
<c>* the projection is becoming affine making a stable pose estimation difficult.</c>
<c>* While the translational part of the pose estimation is typically very stable,</c>
<c>* the estimation of the rotational part becomes difficult when looking exactly</c>
<c>* perpendicular at the object. In these cases, create_aniso_shape_model should</c>
<c>* be preferred.</c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'automotive/car_door_calib_plate')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window_fit_size (0, 0, Width, Height, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Compute calibrated pose of object</c>
<l>CalTabDescrName := 'caltab_200mm.descr'</l>
<l>gen_cam_par_area_scan_division (0.0160522, -402.331, 9.30632e-006, 9.3e-006, 315.431, 273.525, 640, 512, CamParam)</l>
<l>caltab_points (CalTabDescrName, X, Y, Z)</l>
<l>find_caltab (Image, Caltab, CalTabDescrName, 3, 112, 5)</l>
<l>find_marks_and_pose (Image, Caltab, CalTabDescrName, CamParam, 128, 10, 18, 0.9, 15, 100, RCoord, CCoord, Pose)</l>
<l>gen_cross_contour_xld (Cross, RCoord, CCoord, 6, 0.785398)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (1)</l>
<l>dev_set_color ('cyan')</l>
<l>dev_display (Cross)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Caltab)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Create model</c>
<l>read_image (Image, 'automotive/car_door_init_pose')</l>
<l>dev_display (Image)</l>
<c>* Select a planar sub part of the car door as model region</c>
<l>read_region (ROI, 'automotive/car_door_region')</l>
<l>reduce_domain (Image, ROI, ImageReduced)</l>
<c>* The plane of the object is approximately the same as the calibration plate.</c>
<c>* However, there is the depth of the calibration plate and an additional displacement.</c>
<l>set_origin_pose (Pose, 0, 0, 0.03, PoseNewOrigin)</l>
<c>* We expect rotation and scale changes</c>
<l>create_planar_calib_deformable_model (ImageReduced, CamParam, PoseNewOrigin, 'auto', -0.1, 0.2, 'auto', 0.6, 1, 'auto', 0.6, 1, 'auto', 'none', 'use_polarity', 'auto', 'auto', [], [], ModelID)</l>
<c>* Get the model contours in world coordinates to be able to easily</c>
<c>* visualize the matching poses later</c>
<l>set_deformable_model_param (ModelID, 'get_deformable_model_contours_coord_system', 'world')</l>
<l>get_deformable_model_contours (ModelContours, ModelID, 1)</l>
<l>count_obj (ModelContours, NumberContour)</l>
<c>* </c>
<c>* The 3D origin of the model is displayed here</c>
<l>get_deformable_model_params (ModelID, 'model_pose', ModelPose)</l>
<l>dev_set_colored (3)</l>
<l>disp_message (WindowHandle, 'Calibrated Pose of Object\n X: ' + ModelPose[0]$'.4f' + ' m\n Y: ' + ModelPose[1]$'.4f' + ' m\n Z: ' + ModelPose[2]$'.4f' + ' m', 'window', 12, 12, 'black', 'true')</l>
<l>dev_disp_3d_coord_system (WindowHandle, CamParam, ModelPose, 0.15)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<c>* Find pose of car door in subsequent images</c>
<l>gen_rectangle1 (Rectangle2, 200, 50, 420, 620)</l>
<l>for Index := 1 to 20 by 1</l>
<l>    read_image (ImageSearch, 'automotive/car_door_' + Index$'.02')</l>
<c>    * For speed reasons the search domain can be reduced</c>
<l>    reduce_domain (ImageSearch, Rectangle2, ImageReducedSearch)</l>
<l>    dev_display (ImageSearch)</l>
<l>    count_seconds (Seconds1)</l>
<l>    find_planar_calib_deformable_model (ImageReducedSearch, ModelID, -0.1, 0.2, 0.6, 1.0, 0.6, 1.0, 0.7, 1, 1, 0, 0.7, [], [], Pose, CovPose, Score)</l>
<l>    count_seconds (Seconds2)</l>
<l>    Time := Seconds2 - Seconds1</l>
<c>    * </c>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1">    * Visualization of detected models</c>
<l>    for Index1 := 0 to |Score| - 1 by 1</l>
<c>        * Select respective match</c>
<l>        tuple_select_range (Pose, Index1 * 7, ((Index1 + 1) * 7) - 1, PoseSelected)</l>
<l>        pose_to_hom_mat3d (PoseSelected, HomMat3D)</l>
<c>        * Construct a Projection of the detected model with its 3D pose</c>
<l>        gen_empty_obj (FoundContour)</l>
<l>        for Index2 := 1 to NumberContour by 1</l>
<l>            select_obj (ModelContours, ObjectSelected, Index2)</l>
<l>            get_contour_xld (ObjectSelected, Y, X)</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<c>            * Transform the metric model into the world coordinate system</c>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>            * Project model from 3D world coordinate system into the camera</c>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>            concat_obj (FoundContour, ModelWorld, FoundContour)</l>
<l>        endfor</l>
<c>        * </c>
<c>        * Display results</c>
<l>        disp_message (WindowHandle, 'Object found in ' + (Time * 1000)$'.4' + ' ms' + '\n X: ' + PoseSelected[0]$'.4f' + ' m\n Y: ' + PoseSelected[1]$'.4f' + ' m\n Z: ' + PoseSelected[2]$'.4f' + ' m', 'window', 12, 12, 'black', 'true')</l>
<l>        dev_set_color ('cyan')</l>
<l>        dev_display (FoundContour)</l>
<l>        dev_set_colored (3)</l>
<l>        dev_disp_3d_coord_system (WindowHandle, CamParam, PoseSelected, 0.15)</l>
<l>    endfor</l>
<l>    if (Index != 20)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    endif</l>
<l>    stop ()</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[3,1]" as_ord="1">endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>

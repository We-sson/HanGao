<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>*</c>
<l>ImageWidth := 4024</l>
<l>ImageHeight := 3036</l>
<l>init_windows (ImageWidth, ImageHeight, WindowHandles)</l>
<c>*</c>
<l>read_camera_setup_model ('camera_model.csm', CameraSetupModelID)</l>
<c>*</c>
<c>* Get the pose of the first calibration plate,</c>
<c>* which represents the ground plane.</c>
<l>read_calib_data ('calib.ccd', CalibDataID)</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', Camera_Params_L)</l>
<l>get_calib_data (CalibDataID, 'calib_obj_pose', [0,1], 'pose', ReferencePose)</l>
<l>set_camera_setup_param (CameraSetupModelID, 'general', 'coord_transf_pose', ReferencePose)</l>
<c>*</c>
<l> Method := 'surface_pairwise'</l>
<l> *Method :='surface_fusion'</l>
<l> *Method:='points_3d'</l>
<l>create_stereo_model (CameraSetupModelID, Method, [], [], StereoModelID)</l>
<c>*</c>
<l>set_stereo_model_image_pairs (StereoModelID, [0], [1])</l>
<c>*限制生成点云区域提高速度</c>
<l>estimate_bounding_box_3d_reconstruction (StereoModelID, 0.015, BoundingBox)</l>
<l>BoundingBox[5] := BoundingBox[5] + 0.015</l>
<l>set_stereo_model_param (StereoModelID, 'bounding_box', BoundingBox)</l>
<c>*</c>
<l>set_stereo_model_param (StereoModelID, 'persistence', 1)</l>
<c>* Set some parameters regarding the disparity method:</c>
<c>* Use the 'binocular_disparity' method.</c>
<l>set_stereo_model_param (StereoModelID, 'disparity_method', 'binocular')</l>
<c>* Use the normalized cross correlation.</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_method', 'ncc')</l>
<c>* Set the mask size.</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_mask_width', 41)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_mask_height', 41)</l>
<c>* Improve the robustness of the matching.</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_filter', 'left_right_check')</l>
<c>* Calculate disparities with sub-pixel precision.</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_sub_disparity', 'interpolation')</l>
<c>* Set the minmum disparity score.</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_score_thresh', 0.35)</l>
<c></c>
<c></c>
<l>set_stereo_model_param (StereoModelID, 'color', 'median')</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_num_levels', 2)</l>
<c></c>
<c>*三维数据采样步距设置,影响精度和运算速度</c>
<l>set_stereo_model_param (StereoModelID, 'sub_sampling_step', 5)</l>
<c></c>
<l>set_stereo_model_param (StereoModelID, 'rectif_sub_sampling', 1)</l>
<c>*</c>
<l>if (Method == 'surface_fusion')</l>
<c>    * </c>
<c>    * Set some fusion parameters.</c>
<c>    *</c>
<c>    * Set resolution to 0.6 mm.</c>
<l>    Resolution := 0.001</l>
<c>    * Set surface tolerance depending on the resolution.</c>
<l>    SurfaceTolerance :=1* Resolution</l>
<c>    </c>
<l>    smoothing:=0.4</l>
<c>    * For better visualization, triangulate the result.</c>
<l>    set_stereo_model_param (StereoModelID, 'point_meshing', 'isosurface')</l>
<c>    * Set the resolution.</c>
<l>    set_stereo_model_param (StereoModelID, 'resolution', Resolution)</l>
<c>    * Set the 'surface_tolerance' parameter.</c>
<l>    set_stereo_model_param (StereoModelID, 'surface_tolerance', SurfaceTolerance)</l>
<l>     set_stereo_model_param (StereoModelID, 'smoothing', smoothing)</l>
<c>    * Color the result.</c>
<l>    set_stereo_model_param (StereoModelID, 'color', 'median')</l>
<l>endif</l>
<c>*</c>
<l>gen_bounding_box_object_model_3d (StereoModelID, ObjectModel3DBoundingBox)</l>
<l>get_camera_setup_param (CameraSetupModelID,0, 'params', CamParam)</l>
<l>create_pose (0, 0, 1, 0, 0, 0, 'Rp+T', 'gba', 'point', Visualize3DPose)</l>
<l>*NumScenes := 4</l>
<c>*</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>* Read image</c>
<c>* 读取左右目图像</c>
<l>list_image_files ('C:/Users/H/source/repos/HanGao/Halcon_SDK/Halcon样图测试/立体视觉/Data', 'default', [], AllCalibImageFiles)</l>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_TL', ImageFiles_L)</l>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_TR', ImageFiles_R)</l>
<c></c>
<c></c>
<l>for I := 1 to |ImageFiles_L|-1 by 1</l>
<l>    read_image (ImageL, ImageFiles_L[I])</l>
<l>    read_image (ImageR, ImageFiles_R[I])</l>
<l>   * mean_image (ImageL, ImageL, 5, 5)</l>
<l>    *mean_image (ImageR, ImageR, 5, 5)</l>
<c>    *</c>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    dev_display (ImageL)</l>
<l>    dev_set_window (WindowHandles[1])</l>
<l>    dev_display (ImageR)</l>
<l>    dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    *stop ()</l>
<c>    *连接图像</c>
<l>    concat_obj (ImageL, ImageR, Images)</l>
<c></c>
<c>    * 从校准的多视图立体图像重建表面。</c>
<l>    reconstruct_surface_stereo (Images, StereoModelID, SceneObjectModel3D)   </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    *connection_object_model_3d (SceneObjectModel3D, 'distance_3d', 0.001, ObjectModel3DConnected)</l>
<l>    *select_object_model_3d (ObjectModel3DConnected, 'num_points', 'and', 50, 1e30, ObjectModel3DSelected)</l>
<l>    *surface_normals_object_model_3d (ObjectModel3DSelected, 'xyz_mapping', [], [], ObjectModel3DNormals)</l>
<c>    </c>
<c>    </c>
<l>    *segment_object_model_3d (ObjectModel3DNormals, [], [], ObjectModel3DOut)</l>
<l>   * prepare_object_model_3d (ObjectModel3DNormals, 'segmentation', 'true', [], [])</l>
<l>    *object_model_3d_to_xyz (X1, Y1, Z1, ObjectModel3DNormals, 'cartesian', CamParam, Visualize3DPose)</l>
<l>    stop()</l>
<l>   * object_model_3d_to_xyz (X, Y, Z, SceneObjectModel3D, 'from_xyz_map', [], [])</l>
<l>    *select_points_object_model_3d (SceneObjectModel3D, 'num_neighbors_fast 0.000001', 0, 1, SceneReduced)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    * 根据点云集合距离平滑动作</c>
<c>    * 参数:提出点云相邻距离值,值越大运算时间越久</c>
<l>    NumNeighbors := 100</l>
<l>    *get_object_model_3d_params (SceneObjectModel3D, 'neighbor_distance ' + NumNeighbors, DistanceDistribution)</l>
<c>    * 参数:排序后按百分比选择对应距离值</c>
<l>    *InlierRate := 90</l>
<l>    *Dis:=|DistanceDistribution| * InlierRate / 100</l>
<l>    *Dis_sort:= sort(DistanceDistribution)</l>
<l>    *Distance :=Dis_sort[Dis]</l>
<c></c>
<l>    get_object_model_3d_params (SceneObjectModel3D, 'num_points', NumPoints)</l>
<c>    * 参数每个相邻集合点群体最小点云数.(消除散点云)</c>
<l>    MinDis:=50</l>
<l>    MinPoint:=0.0015</l>
<l>    select_points_object_model_3d (SceneObjectModel3D, 'num_neighbors_fast '+MinPoint,MinDis , NumPoints, ObjectModel3DThresholded)</l>
<c>    </c>
<c>    </c>
<c>    *平滑点云</c>
<l>    *smooth_object_model_3d (ObjectModel3DThresholded, 'mls', ['mls_abs_sigma','mls_force_inwards'],[0.01,'false'] , SmoothObjectModel3D)</l>
<c>    </c>
<c>    </c>
<c>    *重新采样点云数据,重置法线往Z方向,减少点云密集成度</c>
<l>    sample_object_model_3d (ObjectModel3DThresholded, 'accurate', 0.0001, 'min_num_points', 1, SampledObjectModel3D)</l>
<c>    </c>
<c></c>
<l>    smooth_object_model_3d (SampledObjectModel3D, 'mls', ['mls_kNN','mls_force_inwards'], [100,'false'], SmoothObjectModel3D)</l>
<c>    </c>
<c>    </c>
<l>    object_model_3d_to_xyz (X, Y, Z, SampledObjectModel3D, 'from_xyz_map', [], [])</l>
<c>    </c>
<c>   </c>
<c></c>
<c>    </c>
<l>    fill_up (X, FillUp_X)</l>
<l>    fill_up (Y, FillUp_Y)</l>
<l>    fill_up (Z, FillUp_Z)</l>
<l>    *surface_normals_object_model_3d (ObjectModel3DThresholded, 'mls', ['mls_kNN'], [100], ObjectModel3DNormals)</l>
<l>    xyz_to_object_model_3d (FillUp_X, FillUp_Y, FillUp_Z, ObjectModel3D)</l>
<c>    </c>
<l>    prepare_object_model_3d (ObjectModel3DThresholded, 'segmentation', 'true', ['max_area_holes'], [8000])</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    object_model_3d_to_xyz (X, Y, Z, SceneObjectModel3D, 'from_xyz_map', [], [])</l>
<l>    compose3 (X, Y, Z, MultiChannelImage)</l>
<l>    get_stereo_model_object (DisparityImage, StereoModelID, [0,1], 'disparity_image')</l>
<l>   get_stereo_model_object (scoreImage, StereoModelID, [0,1], 'score_image')</l>
<c></c>
<c>    </c>
<c>    </c>
<l>    get_stereo_model_object (FromImage, StereoModelID, [0, 1], 'from_image_rect')</l>
<l>    get_stereo_model_object (ToImage, StereoModelID, [0, 1], 'to_image_rect')</l>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    concat_obj (FromImage, ToImage, RectifiedImages)</l>
<l>    tile_images (RectifiedImages, TiledRectifiedImages, 2, 'horizontal')</l>
<l>    get_image_size (TiledRectifiedImages, Width, Height)</l>
<l>    gen_empty_obj (EpipolarLines)</l>
<l>    for Row := 0 to Height by 200</l>
<l>       gen_contour_polygon_xld (Line, [Row,Row], [0,Width - 1])</l>
<l>       concat_obj (EpipolarLines, Line, EpipolarLines)</l>
<l>    endfor</l>
<l>    dev_display (TiledRectifiedImages)</l>
<l>    dev_display (EpipolarLines)</l>
<c>    *</c>
<l>    *dev_set_window (WindowHandles[0])</l>
<l>    *dev_clear_window ()</l>
<l>    *dev_set_window (WindowHandles[1])</l>
<l>    *dev_clear_window ()</l>
<l>    *dev_display (DisparityImage)</l>
<l>    dev_disp_text ('Disparity image', 'window', 'top', 'left', 'black', [], [])</l>
<c>  </c>
<l>    GenParamName := ['alpha_1', 'disp_pose_0']</l>
<l>    GenParamValue :=  [0.1, 'true']</l>
<l>    visualize_object_model_3d (WindowHandles[1], [SceneObjectModel3D, ObjectModel3DBoundingBox], CamParam, Visualize3DPose, ['color_0', GenParamName], ['light gray', GenParamValue], [], [], [], Visualize3DPose)</l>
<l>    if (Method == 'surface_fusion')</l>
<l>        visualize_object_model_3d (WindowHandles[1], [SceneObjectModel3D, ObjectModel3DBoundingBox], CamParam, Visualize3DPose, ['color_attrib_0', GenParamName], ['red', GenParamValue], [], [], [], Visualize3DPose)</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="find_and_visualize_calib_object">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CalibDataID" base_type="ctrl" dimension="0"/>
<par name="CameraIndex" base_type="ctrl" dimension="0"/>
<par name="CalibObjPoseIndex" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>try</l>
<l>    find_calib_object (Image, CalibDataID, CameraIndex, 0, CalibObjPoseIndex, [], [])</l>
<l>    get_calib_data_observ_contours (Contours, CalibDataID, 'marks', CameraIndex, 0, CalibObjPoseIndex)</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Contours)</l>
<l>catch (Exception)</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    dev_disp_text (Exception[2], 'window', 'top', 'left', 'white', ['box_color', 'shadow'], ['red', 'false'])</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="find_and_visualize_calib_object">
<parameters>
<parameter id="CalibDataID"/>
<parameter id="CalibObjPoseIndex"/>
<parameter id="CameraIndex"/>
<parameter id="Image"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_calib_images">
<interface>
<io>
<par name="ImageL" base_type="iconic" dimension="0"/>
<par name="ImageR" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandleL" base_type="ctrl" dimension="0"/>
<par name="WindowHandleR" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (ImageL, RegionOverexposedL, 254, 255)</l>
<l>threshold (ImageR, RegionOverexposedR, 254, 255)</l>
<c>*</c>
<l>dev_set_window (WindowHandleL)</l>
<l>dev_display (ImageL)</l>
<l>dev_set_draw ('fill')</l>
<l>dev_set_color ('red')</l>
<l>dev_display (RegionOverexposedL)</l>
<l>dev_set_window (WindowHandleR)</l>
<l>dev_display (ImageR)</l>
<l>dev_set_draw ('fill')</l>
<l>dev_set_color ('red')</l>
<l>dev_display (RegionOverexposedR)</l>
<l>return ()</l>
</body>
<docu id="dev_display_calib_images">
<parameters>
<parameter id="ImageL"/>
<parameter id="ImageR"/>
<parameter id="WindowHandleL"/>
<parameter id="WindowHandleR"/>
</parameters>
</docu>
</procedure>
<procedure name="visualize_disparity_om3d">
<interface>
<io>
<par name="ImageDisparity" base_type="iconic" dimension="0"/>
<par name="ImageMappedL" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CamParamRect1" base_type="ctrl" dimension="0"/>
<par name="CamParamRect2" base_type="ctrl" dimension="0"/>
<par name="RelPoseRect" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Visualize3DPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Visualize3DPoseOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
</body>
<docu id="visualize_disparity_om3d">
<parameters>
<parameter id="CamParamRect1"/>
<parameter id="CamParamRect2"/>
<parameter id="ImageDisparity"/>
<parameter id="ImageMappedL"/>
<parameter id="RelPoseRect"/>
<parameter id="Title"/>
<parameter id="Visualize3DPose"/>
<parameter id="Visualize3DPoseOut"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="init_window">
<interface>
<ic>
<par name="ImageWidth" base_type="ctrl" dimension="0"/>
<par name="ImageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>*</c>
<l>Scale := 0.4</l>
<l>LineWidth := 2</l>
<c>*</c>
<l>dev_open_window (0, 0, ImageWidth*Scale, ImageHeight*Scale, 'black', WindowHandle)</l>
<l>dev_set_line_width (LineWidth)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>* set_window_param (WindowHandle, 'flush', 'false')</l>
<l>* dev_open_window (0, ImageWidth*Scale + 10, ImageWidth*Scale, ImageHeight*Scale, 'black', WindowHandleR)</l>
<l>* dev_set_line_width (LineWidth)</l>
<l>* set_display_font (WindowHandleR, 16, 'mono', 'true', 'false')</l>
<l>* set_window_param (WindowHandleR, 'flush', 'false')</l>
<l>return ()</l>
</body>
<docu id="init_window">
<parameters>
<parameter id="ImageHeight"/>
<parameter id="ImageWidth"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="init_cameras">
<interface>
<oc>
<par name="AcqHandles" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>open_framegrabber ('USB3Vision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '1409000BFC1C_IDSImagingDevelopmentSystemsGmbH_U33250MLCHQ', 0, -1, AcqHandle1)</l>
<l>open_framegrabber ('USB3Vision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '1409000BFC2A_IDSImagingDevelopmentSystemsGmbH_U33250MLCHQ', 0, -1, AcqHandle2)</l>
<l>open_framegrabber ('USB3Vision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '1409000BFC31_IDSImagingDevelopmentSystemsGmbH_U33250MLCHQ', 0, -1, AcqHandle3)</l>
<l>AcqHandles := [AcqHandle1, AcqHandle2, AcqHandle3]</l>
<l>return ()</l>
</body>
<docu id="init_cameras">
<parameters>
<parameter id="AcqHandles">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>framegrabber</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="init_windows">
<interface>
<ic>
<par name="ImageWidth" base_type="ctrl" dimension="0"/>
<par name="ImageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="WindowHandles" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>*</c>
<l>Scale := 0.15</l>
<l>LineWidth := 2</l>
<c>*</c>
<l>dev_open_window (0, 0, ImageWidth*Scale, ImageHeight*Scale, 'black', WindowHandle1)</l>
<l>dev_set_line_width (LineWidth)</l>
<l>set_display_font (WindowHandle1, 16, 'mono', 'true', 'false')</l>
<c>*</c>
<l>dev_open_window (0, ImageWidth*Scale + 10, ImageWidth*Scale, ImageHeight*Scale, 'black', WindowHandle2)</l>
<l>dev_set_line_width (LineWidth)</l>
<l>set_display_font (WindowHandle2, 16, 'mono', 'true', 'false')</l>
<c>*</c>
<l>WindowHandles := [WindowHandle1, WindowHandle2]</l>
<l>return ()</l>
</body>
<docu id="init_windows">
<parameters>
<parameter id="ImageHeight"/>
<parameter id="ImageWidth"/>
<parameter id="WindowHandles">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>window</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="get_mouse_click_break">
<interface>
<ic>
<par name="WindowHandles" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Break" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Break := 0</l>
<c></c>
<l>for WindowIndex := 0 to |WindowHandles|-1 by 1</l>
<l>    dev_set_window (WindowHandles[WindowIndex])</l>
<l>    dev_disp_text ('Click to continue.', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    try</l>
<l>        get_mposition (WindowHandles[WindowIndex], Row, Column, Button)</l>
<l>        if (Button == 1)</l>
<l>            dev_set_window (WindowHandles[WindowIndex])</l>
<l>            dev_disp_text ('Continuing...', 'window', 'center', 'center', 'black', [], [])</l>
<l>            flush_buffer (WindowHandles[WindowIndex])</l>
<l>            wait_seconds (0.5)</l>
<l>            Break := 1</l>
<l>        endif</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="get_mouse_click_break">
<parameters>
<parameter id="Break"/>
<parameter id="WindowHandles"/>
</parameters>
</docu>
</procedure>
<procedure name="estimate_camera_parameters">
<interface>
<ic>
<par name="OM3DScene" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CameraParam" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* This procedure estimates the camera parameters of a 3D sensor.</c>
<c>* The camera parameters and the camera pose are found such that</c>
<c>* the observed 3D points are projected onto their original 2D</c>
<c>* image coordinates.</c>
<c></c>
<c>* Note that the 3D points must be distributed throughout the</c>
<c>* relevant volume. If for example all 3D points lie on a single</c>
<c>* plane, the calibration will be less accurate.</c>
<c></c>
<c>* The resulting camera parameters and pose can be used to project</c>
<c>* matching results into the range images.</c>
<c></c>
<c>* Get 3D coordinates.</c>
<l>get_object_model_3d_params (OM3DScene, 'point_coord_x', XCoords)</l>
<l>get_object_model_3d_params (OM3DScene, 'point_coord_y', YCoords)</l>
<l>get_object_model_3d_params (OM3DScene, 'point_coord_z', ZCoords)</l>
<c>* Get 2D coordinates.</c>
<l>get_object_model_3d_params (OM3DScene, 'mapping_row', Rows)</l>
<l>get_object_model_3d_params (OM3DScene, 'mapping_col', Columns)</l>
<c>* Start camera parameters.</c>
<l>get_object_model_3d_params (OM3DScene, 'mapping_size', MappingSize)</l>
<l>Width := MappingSize[0]</l>
<l>Height := MappingSize[1]</l>
<l>gen_cam_par_area_scan_division (0.012, 0, 5.2e-006, 5.2e-006, Width / 2, Height / 2, Width, Height, CameraParamStart)</l>
<l>CameraPoseStart := [0, 0, 0, 0, 0, 0, 0]</l>
<c>* Calibrate the sensor.</c>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, [XCoords,YCoords,ZCoords])</l>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', CameraParamStart)</l>
<l>set_calib_data_observ_points (CalibDataID, 0, 0, 0, Rows, Columns, 'all', CameraPoseStart)</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CameraParam)</l>
<l>get_calib_data (CalibDataID, 'calib_obj_pose', [0, 0], 'pose', CameraPose)</l>
<l>return ()</l>
</body>
<docu id="estimate_camera_parameters">
<parameters>
<parameter id="CameraParam"/>
<parameter id="CameraPose"/>
<parameter id="OM3DScene"/>
</parameters>
</docu>
</procedure>
</hdevelop>

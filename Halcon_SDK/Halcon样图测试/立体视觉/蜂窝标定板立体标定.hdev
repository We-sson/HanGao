<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* This example demonstrates how to calibrate a stereo camera</c>
<c>* system with telecentric tilt lenses using the new</c>
<c>* HALCON calibration plate.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Read image</c>
<c>* 读取左右目图像</c>
<l>list_image_files ('/Data', 'default', [], AllCalibImageFiles)</l>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_L', ImageFiles_L)</l>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_R', ImageFiles_R)</l>
<c></c>
<l>read_image (Image, ImageFiles_L[0])</l>
<l>get_image_size (Image, Width, Height)</l>
<c>* </c>
<c>* Initialize parameters for calibration data model</c>
<l>NumCameras := 2</l>
<l>NumCalibObjects := 1</l>
<l>CalibSetup := 'calibration_object'</l>
<l>DescrFile := '27_31_0.0015_calplate.cpd'</l>
<c>* </c>
<c>* Initialize initial camera parameters</c>
<c>* 焦距</c>
<l>Focus := 16</l>
<c>* 像素尺寸</c>
<l>Sx := 2.2e-6</l>
<l>Sy := 2.2e-6</l>
<c>* The tilt angles define the angles by which the lenses are tilted.</c>
<l>*Tilt_Cam_0 := 8.5</l>
<l>*Tilt_Cam_1 := 0.5</l>
<c>* The rotation angle defines the orientation of the axis around</c>
<c>* which the tilt is performed. It is the angle between the x-axis</c>
<c>* of the sensor and the tilt axis of the lens.</c>
<l>*Rot_Cam_0 := 270</l>
<l>*Rot_Cam_1 := 90</l>
<l>*Kappa := 0</l>
<c>* 设置面阵初始化相机</c>
<l>gen_cam_par_area_scan_division (Focus*0.0001, 0, Sx, Sy, Width/2, Height/2, Width, Height, InitialCamParam_Cam_0)</l>
<l>gen_cam_par_area_scan_division (Focus*0.0001, 0,  Sx, Sy, Width/2, Height/2, Width, Height, InitialCamParam_Cam_1)</l>
<l>*gen_cam_par_area_scan_tilt_bilateral_telecentric_division (Magnification, Kappa, Tilt_Cam_0, Rot_Cam_0, Sx, Sy, Width / 2, Height / 2, Width, Height, InitialCamParam_Cam_0)</l>
<l>*gen_cam_par_area_scan_tilt_bilateral_telecentric_division (Magnification, Kappa, Tilt_Cam_1, Rot_Cam_1, Sx, Sy, Width / 2, Height / 2, Width, Height, InitialCamParam_Cam_1)</l>
<c>* While tilt lenses provide a region for in which the depth of field</c>
<c>* overlaps in a large area for both cameras, the depth of field is</c>
<c>* wedge-shaped, where the wedge of one camera has a small depth at</c>
<c>* the left or right borders of the images.  This means that some marks</c>
<c>* in the calibration sequence at the left or right borders may still</c>
<c>* be slightly out of focus in this setup.  Therefore, we use a higher</c>
<c>* Sigma to make sure that all marks are extracted.</c>
<l>Sigma := 4.0</l>
<c>* </c>
<c>* Create calibration data model and descriptor file</c>
<c>* 创建双目标定对象 2个相机1个标定板</c>
<l>create_calib_data (CalibSetup, NumCameras, NumCalibObjects, CalibDataID)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, DescrFile)</l>
<c>* </c>
<c>* Set initial camera parameters</c>
<c>* 设置初始化相机参数</c>
<l>set_calib_data_cam_param (CalibDataID, 0, [], InitialCamParam_Cam_0)</l>
<l>set_calib_data_cam_param (CalibDataID, 1, [], InitialCamParam_Cam_1)</l>
<c>* </c>
<c>* Find and extract calibration marks</c>
<c>* 创建视图窗口</c>
<l>open_windows_multi_view_setup (Height, Width, 0.2, WindowHandles)</l>
<l>caltab_points (DescrFile, X, Y, Z)</l>
<l>CamLRow:=[]</l>
<l>CamLCol:=[]</l>
<l>CamRRow:=[]</l>
<l>CamRCol:=[]</l>
<c></c>
<c></c>
<l>for Index := 0 to |ImageFiles_L|-1 by 1</l>
<c>    * </c>
<c>    * Read calibration images</c>
<c>    * 读取左右图像</c>
<l>    read_image (Image0, ImageFiles_L[Index])</l>
<l>    read_image (Image1, ImageFiles_R[Index])</l>
<c>    * </c>
<c>    * Find calibration plate</c>
<c>    * 查找标定板数据</c>
<l>    find_calib_object (Image0, CalibDataID, 0, 0, Index, 'sigma', Sigma)</l>
<l>    find_calib_object (Image1, CalibDataID, 1, 0, Index, 'sigma', Sigma)</l>
<c>    * </c>
<c>    * Extract and display coordinates of the observed points</c>
<c>    * 提取并显示观测点的坐标</c>
<c></c>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, Index, Row0, Column0, PointIndex0, Pose0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 1, 0, Index, Row1, Column1, PointIndex1, Pose1)</l>
<l>    gen_cross_contour_xld (Cross0, Row0, Column0, 30, 0.785398)</l>
<l>    gen_cross_contour_xld (Cross1, Row1, Column1, 30, 0.785398)</l>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    dev_display (Image0)</l>
<l>    dev_display (Cross0)</l>
<l>    dev_set_window (WindowHandles[1])</l>
<l>    dev_display (Image1)</l>
<l>    dev_display (Cross1)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    tuple_new := (Row0 * 0) +0</l>
<l>CamLRow:=[]</l>
<l>CamLCol:=[]</l>
<l>CamRRow:=[]</l>
<l>CamRCol:=[]</l>
<c>    </c>
<c>    </c>
<l>    disp_message (WindowHandles[0], 'Camera 0  Image ' + Index, 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandles[1], 'Camera 1  Image ' + Index, 'window', 12, 12, 'black', 'true')</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>   Point:=min2(|PointIndex0|, |PointIndex1|)</l>
<c>    </c>
<l>    PRow0:=Row0[0:Point-1]</l>
<l>    PRow1:=Row1[0:Point-1]</l>
<c></c>
<c></c>
<c>* </c>
<c>* Calibrate the cameras</c>
<c>* 标定相机</c>
<l>calibrate_cameras (CalibDataID, Error)</l>
<c></c>
<l>*binocular_calibration (Error, Error, Error, Error, Error, Error, Error, InitialCamParam_Cam_1, InitialCamParam_Cam_1, Error, Error, 'all', CamParam1, CamParam2, NFinalPose1, NFinalPose2, RelPose, Errors)</l>
<c></c>
<c>* </c>
<c>* Get internal camera parameters and the corresponding labels</c>
<c>* 获得标定相机参数名显示结果</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params_labels', ParLabels)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParamsL)</l>
<l>get_calib_data (CalibDataID, 'camera', 1, 'params', CamParamsR)</l>
<c>* Get camera poses</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'pose_labels', PoseLabels)</l>
<c>* Right camera is reference camera for calibration data model</c>
<l>get_calib_data (CalibDataID, 'camera', 1, 'pose', RelCamPose)</l>
<c></c>
<c>* </c>
<c>* Display the results of the calibration</c>
<l>Units := ['', 'mm', '1/㎡', 'μm', 'μm', 'px', 'px', 'px','px']</l>
<l>FormatStringLabels := max(strlen(ParLabels))$'0' + 's'</l>
<l>FormatStringParams := ''</l>
<l>CamParTable0 := ParLabels$FormatStringLabels + ' = ' + CamParamsL + ' ' + Units</l>
<l>CamParTable1 := ParLabels$FormatStringLabels + ' = ' + CamParamsR + ' ' + Units</l>
<l>Text := 'The cameras are now calibrated and ready for'</l>
<l>Text[1] := 'high accuracy metric measurements.'</l>
<l>Text[2] := 'The final camera parameters of camera L are:'</l>
<l>Text[3] := ' '</l>
<c>* Display results for camera 0</c>
<l>dev_set_window (WindowHandles[0])</l>
<l>dev_clear_window ()</l>
<l>Message := [Text,CamParTable0,' ','Back projection error = ' + Error$'.3f' + ' px']</l>
<l>disp_message (WindowHandles[0], Message, 'window', 12, 12, 'black', 'true')</l>
<c>* Display results for camera 1</c>
<l>dev_set_window (WindowHandles[1])</l>
<l>dev_clear_window ()</l>
<l>Text[2] := 'The final camera parameters of camera R are:'</l>
<l>Message := [Text,CamParTable1,' ','Back projection error = ' + Error$'.3f' + ' px']</l>
<l>disp_message (WindowHandles[1], Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandles[1], 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<c></c>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_TL', ImageFiles_TL)</l>
<l>tuple_regexp_select (AllCalibImageFiles, 'Image_TR', ImageFiles_TR)</l>
<c></c>
<c></c>
<l>for Index := 0 to |ImageFiles_TL| - 1 by 2</l>
<c>    * Read the stereo image pair</c>
<l>    read_image (Image0, ImageFiles_TL[Index])</l>
<l>    read_image (Image1, ImageFiles_TR[Index])</l>
<l>    get_image_size (Image0, Width, Height)</l>
<c>    * </c>
<c>    * Rectify the stereo image pair using</c>
<c>    * transformation maps</c>
<c>    * 图像极线校正</c>
<c>  </c>
<l>    gen_binocular_rectification_map (Map1, Map2, CamParamsL[1:8], CamParamsR[1:8], RelCamPose, 0.5, 'viewing_direction', 'bilinear', CamParamRect_L, CamParamRect_R, CamPoseRect_L, CamPoseRect_R, RelPoseRect)</l>
<l>    map_image (Image0, Map1, ImageRectified0)</l>
<l>    map_image (Image1, Map2, ImageRectified1)</l>
<l>    median_image (ImageRectified0, ImageL, 'circle', 2.5, 'mirrored')</l>
<l>    median_image (ImageRectified1, ImageR, 'circle', 2.5, 'mirrored')</l>
<l>    *gray_opening_rect (ImageR0, ImageRe0, 20, 20)</l>
<l>    *gray_opening_rect (ImageR1, ImageRe1, 20, 20)</l>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_paint ('default')</l>
<l>    dev_display (ImageRectified0)</l>
<l>    dev_set_window (WindowHandles[1])</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_paint ('default')</l>
<l>    dev_display (ImageRectified1)</l>
<l>    disp_message (WindowHandles[0], 'Rectified image pair ' + max([Index / 2 + 1,1]) + ' of ' + (|ImageFiles_L|), 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandles[1], 'black', 'true')</l>
<c>    </c>
<c>    </c>
<l>    for I:= 0 to 30 by 0.5</l>
<l>        dev_clear_window ()</l>
<c>      </c>
<c></c>
<c>    </c>
<l>        binocular_disparity(ImageL, ImageR, DisparityImage, Score, \
                      'ncc', 20, 20, 0, -50, 50, 3, 0, \
                      'none', 'none')</l>
<l>        binocular_disparity_mg (DisparityImage, DisparityImage, Disparity1, Score1, 1, 30, 5, 0, 'false', 'default_parameters', RelCamPose)</l>
<c>        </c>
<l>        binocular_disparity_ms (Disparity1, Disparity1, Disparity2, Score2, -30, 30, 50, 50, [], RelCamPose)</l>
<c>      </c>
<c>        </c>
<l>        binocular_distance_ms (Disparity2, Disparity2, Distance1, Score3, CamParamRect0, CamParamRect0, CamPoseRect0, -30, 30, 50, 50, [], RelCamPose)</l>
<c>        </c>
<l>       binocular_distance_mg (ImageL, ImageR, DisparityImage,Score,\
                              CamParamRect0, CamParamRect1, RelPoseRect, \
                              0.02, 2, 0.1, 0, 'true', 'default_parameters', 'accurate')</l>
<l>        binocular_distance (ImageL, ImageR, Distance, Score,\
                            CamParamRect0, CamParamRect1, RelPoseRect, \
                            'ncc', 11, 11, 0, 0, 30, 1, 0, 'none', 'none')</l>
<l>       dev_display (DisparityImage)   </l>
<l>              wait_seconds (0.5)</l>
<c>           </c>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    * 计算视差</c>
<c>* </c>
<c>* 填充视差图中的缺陷</c>
<l>get_domain (DisparityImage, RegionInpainting)</l>
<l>complement (RegionInpainting, RegionInpainting)</l>
<l>full_domain (DisparityImage, DisparityImage)</l>
<l>harmonic_interpolation (DisparityImage, RegionInpainting, DisparityImage, 0.001)</l>
<c></c>
<c></c>
<c>    </c>
<l>    dev_set_window (WindowHandles[0])</l>
<c></c>
<c>    </c>
<c>    </c>
<l>    stop ()</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>stop ()</l>
<c>* </c>
<c>* Read and process stereo image pairs acquired with</c>
<c>* the calibrated stereo camera system</c>
<c>* *************************************************</c>
<c>* Set image files</c>
<l>*ImageFiles := ['stereo/telecentric_tilt/cam_0_cartridge', 'stereo/telecentric_tilt/cam_1_cartridge', 'stereo/telecentric_tilt/cam_0_tissue', 'stereo/telecentric_tilt/cam_1_tissue']</l>
<c>* Initialize parameters for the determination of</c>
<c>* the distance values</c>
<l>GrayConstancy := 0.07</l>
<l>GradientConstancy := 80</l>
<l>Smoothness := 10</l>
<l>InitialGuess := 0</l>
<c>* </c>
<c>* Rectify stereo image pairs and determine the corresponding</c>
<c>* distance values to the camera system</c>
<l>for Index := 0 to |ImageFiles_TL| - 1 by 2</l>
<c>    * Read the stereo image pair</c>
<l>    read_image (Image0, ImageFiles_TL[Index])</l>
<l>    read_image (Image1, ImageFiles_TR[Index])</l>
<l>    get_image_size (Image0, Width, Height)</l>
<c>    * </c>
<c>    * Rectify the stereo image pair using</c>
<c>    * transformation maps</c>
<l>    gen_binocular_rectification_map (Map1, Map2, CamParams0, CamParams1, RelCamPose, 1, 'viewing_direction', 'bilinear', CamParamRect0, CamParamRect1, CamPoseRect0, CamPoseRect1, RelPoseRect)</l>
<l>    map_image (Image0, Map1, ImageRectified0)</l>
<l>    map_image (Image1, Map2, ImageRectified1)</l>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_paint ('default')</l>
<l>    dev_display (ImageRectified0)</l>
<l>    dev_set_window (WindowHandles[1])</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_paint ('default')</l>
<l>    dev_display (ImageRectified1)</l>
<l>    disp_message (WindowHandles[0], 'Rectified image pair ' + max([Index / 2 + 1,1]) + ' of ' + (|ImageFiles_TL|), 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandles[1], 'black', 'true')</l>
<l>    stop ()</l>
<c>    </c>
<l>    binocular_disparity (ImageRectified0, ImageRectified1, Disparity, Score, 'ncc', 57, 57, 5, 0, 60, 1, 0.1, 'none', 'none')</l>
<c>    </c>
<c>    * Ignore left part of image 0, as it is not visible in image 1</c>
<l>    *get_image_size (ImageRectified0, Width0Rect, Height0Rect)</l>
<l>    *gen_rectangle1 (ROIValid, 0, 100, Height0Rect - 1, Width0Rect - 1)</l>
<c>    * </c>
<c>    * Determine the distance image</c>
<l>    binocular_distance_mg (ImageRectified0, ImageRectified1, DistanceImage, ScoreImage, CamParamRect0, CamParamRect1, RelPoseRect, GrayConstancy, GradientConstancy, Smoothness, InitialGuess, 'false', 'default_parameters', 'accurate')</l>
<l>   * reduce_domain (DistanceImage, ROIValid, DistanceImage)</l>
<c>    * </c>
<c>    * Correct the distance image for the tilt of the</c>
<c>    * stereo camera system. First, define a region, which</c>
<c>    * indicates the areas on the reference plane</c>
<l>    gen_circle (RegionDefiningReferencePlane, 520, 677, 465)</l>
<l>    tilt_correction (DistanceImage, RegionDefiningReferencePlane, DistanceImageCorrected)</l>
<c>    * Delete outliers</c>
<l>    mean_image (DistanceImageCorrected, DistanceImageCorrectedMean, 20, 20)</l>
<l>    dyn_threshold (DistanceImageCorrected, DistanceImageCorrectedMean, Region, 5, 'light')</l>
<l>    overpaint_region (DistanceImageCorrectedMean, Region, 255, 'fill')</l>
<c>    * Display the distance image with tilt correction</c>
<c>    * and deleted outliers</c>
<l>    dev_set_window (WindowHandles[0])</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (DistanceImageCorrectedMean)</l>
<l>    disp_message (WindowHandles[0], 'Distance image', 'window', 12, 12, 'black', 'true')</l>
<c>    * Display the distance image in 3D plot mode</c>
<l>    compose2 (DistanceImageCorrectedMean, ImageRectified0, MultiChannelImage)</l>
<l>    crop_domain (MultiChannelImage, ImagePart)</l>
<l>    dev_set_window (WindowHandles[1])</l>
<l>    dev_set_paint (['3d_plot', 'texture'])</l>
<l>    dev_display (ImagePart)</l>
<l>    if (Index &lt; |ImageFiles| - 2)</l>
<l>        disp_continue_message (WindowHandles[1], 'black', 'true')</l>
<l>    endif</l>
<l>    stop ()</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="open_windows_multi_view_setup">
<interface>
<ic>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Scale" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="WindowHandles" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* This procedure opens four windows in order to display</c>
<c>* the images of a multi-view stereo setup consisting</c>
<c>* of four cameras</c>
<c>* </c>
<l>dev_open_window (0, 0, Width * Scale, Height * Scale, 'black', WindowHandle0)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('forest green')</l>
<l>set_display_font (WindowHandle0, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>dev_open_window (0, (Width * Scale) + 8, Width * Scale, Height * Scale, 'black', WindowHandle1)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('forest green')</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>WindowHandles := [WindowHandle0,WindowHandle1]</l>
<l>return ()</l>
</body>
<docu id="open_windows_multi_view_setup">
<parameters>
<parameter id="Height">
<default_type>integer</default_type>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="Scale"/>
<parameter id="Width">
<default_type>integer</default_type>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="WindowHandles">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>window</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="tilt_correction">
<interface>
<io>
<par name="DistanceImage" base_type="iconic" dimension="0"/>
<par name="RegionDefiningReferencePlane" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DistanceImageCorrected" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c>* Reduce the given region, which defines the reference plane</c>
<c>* to the domain of the distance image</c>
<l>get_domain (DistanceImage, Domain)</l>
<l>intersection (RegionDefiningReferencePlane, Domain, RegionDefiningReferencePlane)</l>
<c>* Determine the parameters of the reference plane</c>
<l>fit_surface_first_order (RegionDefiningReferencePlane, DistanceImage, 'tukey', 5, 2, Alpha, Beta, Mean)</l>
<l>moments_gray_plane (RegionDefiningReferencePlane, DistanceImage, MRow, MCol, Alpha, Beta, Mean)</l>
<c>* Generate a distance image of the reference plane</c>
<l>get_image_pointer1 (DistanceImage, Pointer, Type, Width, Height)</l>
<l>area_center (RegionDefiningReferencePlane, Area, Row, Column)</l>
<l>gen_image_surface_first_order (ReferencePlaneDistance, Type, Alpha, Beta, Mean, Row, Column, Width, Height)</l>
<c>* Subtract the distance image of the reference plane</c>
<c>* from the distance image of the object</c>
<l>sub_image (DistanceImage, ReferencePlaneDistance, DistanceImageWithoutTilt, 1, 0)</l>
<c>* Determine the scale factor for the reduction of the distance values</c>
<l>CosGamma := 1.0 / sqrt(Alpha * Alpha + Beta * Beta + 1)</l>
<c>* Reduce the distance values</c>
<l>scale_image (DistanceImageWithoutTilt, DistanceImageCorrected, CosGamma, 0)</l>
<l>return ()</l>
</body>
<docu id="tilt_correction">
<short lang="en_US">Correction of a distance image according to a tilt of a reference object plane with respect to the rectified image plane.</short>
<parameters>
<parameter id="DistanceImage"/>
<parameter id="DistanceImageCorrected"/>
<parameter id="RegionDefiningReferencePlane"/>
</parameters>
</docu>
</procedure>
<procedure name="check_epipolar_constraint">
<interface>
<io>
<par name="ImagesRectL" base_type="iconic" dimension="0"/>
<par name="ImagesRectR" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="RectCamParL" base_type="ctrl" dimension="0"/>
<par name="RectCamParR" base_type="ctrl" dimension="0"/>
<par name="WindowHandle1" base_type="ctrl" dimension="0"/>
<par name="WindowHandle2" base_type="ctrl" dimension="0"/>
<par name="CaltabFile" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="EpipolarError" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Check the epipolar constraint on the rectified images:</c>
<c>*    (the differences of the features' row coordinates should be small)</c>
<c>* Parameter settings for find_caltab and find_marks_and_pose</c>
<l>SizeGauss := 3</l>
<l>MarkThresh := 120</l>
<l>MinDiamMarks := 5</l>
<l>StartThresh := 128</l>
<l>DeltaThresh := 10</l>
<l>MinThresh := 18</l>
<l>Alpha := 0.9</l>
<l>MinContLength := 15</l>
<l>MaxDiamMarks := 100</l>
<l>X := []</l>
<l>Rows := []</l>
<l>Cols := []</l>
<c></c>
<l>count_obj (ImagesRectL, NumImages)</l>
<l>if (NumImages &gt; 0)</l>
<l>    RowsL := []</l>
<l>    ColsL := []</l>
<l>    RowsR := []</l>
<l>    ColsR := []</l>
<l>    for I := 1 to NumImages by 1</l>
<l>        select_obj (ImagesRectL, ImageRectifiedL, I)</l>
<l>        select_obj (ImagesRectR, ImageRectifiedR, I)</l>
<c>        * Find the calibration points and the correspondences of these points in both images:</c>
<l>        find_caltab (ImageRectifiedL, CaltabL, CaltabFile, SizeGauss, MarkThresh, MinDiamMarks)</l>
<l>        find_marks_and_pose (ImageRectifiedL, CaltabL, CaltabFile, RectCamParL, StartThresh, DeltaThresh, MinThresh, Alpha, MinContLength, MaxDiamMarks, RCoordL, CCoordL, StartPoseL)</l>
<l>        find_caltab (ImageRectifiedR, CaltabR, CaltabFile, SizeGauss, MarkThresh, MinDiamMarks)</l>
<l>        find_marks_and_pose (ImageRectifiedR, CaltabR, CaltabFile, RectCamParR, StartThresh, DeltaThresh, MinThresh, Alpha, MinContLength, MaxDiamMarks, RCoordR, CCoordR, StartPoseR)</l>
<l>        RowsL := [RowsL,RCoordL]</l>
<l>        ColsL := [ColsL,CCoordL]</l>
<l>        RowsR := [RowsR,RCoordR]</l>
<l>        ColsR := [ColsR,CCoordR]</l>
<l>    endfor</l>
<l>    X := RowsR - RowsL</l>
<l>    EpipolarError := [mean(X),deviation(X)]</l>
<c>    * Visualize the rectified images and the result of the epipolar test:</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_clear_window ()</l>
<l>get_cam_par_data (RectCamParL, 'image_width', ImageWidth)</l>
<l>get_cam_par_data (RectCamParL, 'image_height', ImageHeight)</l>
<l>    dev_set_part (0, 0, ImageHeight - 1, ImageWidth - 1)</l>
<l>    select_obj (ImagesRectL, ImageRectifiedL, 1)</l>
<l>    dev_display (ImageRectifiedL)</l>
<l>    for I := 6 to 49 by 7</l>
<c>        * Display the epipolar line of a certain point</c>
<l>        gen_contour_polygon_xld (Line, [RowsL[I],RowsL[I]], [0,ImageWidth - 1])</l>
<l>        gen_cross_contour_xld (Cross, RowsL[I], ColsL[I], 6, 0)</l>
<l>        dev_display (Line)</l>
<l>        dev_display (Cross)</l>
<l>    endfor</l>
<l>    Message[0] := 'Epipolar constraint error:'</l>
<l>    Message[1] := 'mean: ' + EpipolarError[0]$'.4f' + ' pixels'</l>
<l>    Message[2] := 'deviation: ' + EpipolarError[1]$'.3f' + ' pixels'</l>
<l>disp_message (WindowHandle1, Message, 'window', 180, 12, 'white', 'false')</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_part (0, 0, ImageHeight - 1, ImageWidth - 1)</l>
<l>    select_obj (ImagesRectR, ImageRectifiedR, 1)</l>
<l>    dev_display (ImagesRectR)</l>
<l>    for I := 6 to 49 by 7</l>
<c>        * Display the epipolar line of a certain point</c>
<l>        gen_contour_polygon_xld (Line, [RowsR[I],RowsR[I]], [0,ImageWidth - 1])</l>
<l>        gen_cross_contour_xld (Cross, RowsR[I], ColsR[I], 6, 0)</l>
<l>        dev_display (Line)</l>
<l>        dev_display (Cross)</l>
<l>    endfor</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="check_epipolar_constraint">
<parameters>
<parameter id="CaltabFile"/>
<parameter id="EpipolarError"/>
<parameter id="ImagesRectL"/>
<parameter id="ImagesRectR"/>
<parameter id="RectCamParL"/>
<parameter id="RectCamParR"/>
<parameter id="WindowHandle1"/>
<parameter id="WindowHandle2"/>
</parameters>
</docu>
</procedure>
</hdevelop>

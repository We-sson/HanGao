//
// File generated by HDevelop for HALCON/.NET (C#) Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using HalconDotNet;

public  partial   class Halcon_Examples_Method
{
  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public   void Set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_OS = new HTuple(), hv_Fonts = new HTuple();
    HTuple hv_Style = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_AvailableFonts = new HTuple(), hv_Fdx = new HTuple();
    HTuple hv_Indices = new HTuple();
    HTuple   hv_Font_COPY_INP_TMP = new HTuple(hv_Font);
    HTuple   hv_Size_COPY_INP_TMP = new HTuple(hv_Size);

    // Initialize local and output iconic variables 
    //This procedure sets the text font of the current window with
    //the specified attributes.
    //
    //Input parameters:
    //WindowHandle: The graphics window for which the font will be set
    //Size: The font size. If Size=-1, the default of 16 is used.
    //Bold: If set to 'true', a bold font is used
    //Slant: If set to 'true', a slanted font is used
    //
    hv_OS.Dispose();
    HOperatorSet.GetSystem("operating_system", out hv_OS);
    if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
        new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
    {
      hv_Size_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP = 16;
    }
    if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
    {
      //Restore previous behavior
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Size = ((1.13677*hv_Size_COPY_INP_TMP)).TupleInt()
          ;
      hv_Size_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
      }
      }
    }
    else
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Size = hv_Size_COPY_INP_TMP.TupleInt()
          ;
      hv_Size_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
      }
      }
    }
    if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
    {
      hv_Fonts.Dispose();
      hv_Fonts = new HTuple();
      hv_Fonts[0] = "Courier";
      hv_Fonts[1] = "Courier 10 Pitch";
      hv_Fonts[2] = "Courier New";
      hv_Fonts[3] = "CourierNew";
      hv_Fonts[4] = "Liberation Mono";
    }
    else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
    {
      hv_Fonts.Dispose();
      hv_Fonts = new HTuple();
      hv_Fonts[0] = "Consolas";
      hv_Fonts[1] = "Menlo";
      hv_Fonts[2] = "Courier";
      hv_Fonts[3] = "Courier 10 Pitch";
      hv_Fonts[4] = "FreeMono";
      hv_Fonts[5] = "Liberation Mono";
    }
    else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
    {
      hv_Fonts.Dispose();
      hv_Fonts = new HTuple();
      hv_Fonts[0] = "Luxi Sans";
      hv_Fonts[1] = "DejaVu Sans";
      hv_Fonts[2] = "FreeSans";
      hv_Fonts[3] = "Arial";
      hv_Fonts[4] = "Liberation Sans";
    }
    else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
    {
      hv_Fonts.Dispose();
      hv_Fonts = new HTuple();
      hv_Fonts[0] = "Times New Roman";
      hv_Fonts[1] = "Luxi Serif";
      hv_Fonts[2] = "DejaVu Serif";
      hv_Fonts[3] = "FreeSerif";
      hv_Fonts[4] = "Utopia";
      hv_Fonts[5] = "Liberation Serif";
    }
    else
    {
      hv_Fonts.Dispose();
      hv_Fonts = new HTuple(hv_Font_COPY_INP_TMP);
    }
    hv_Style.Dispose();
    hv_Style = "";
    if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Style = hv_Style+"Bold";
      hv_Style.Dispose();
      hv_Style = ExpTmpLocalVar_Style;
      }
      }
    }
    else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
    {
      hv_Exception.Dispose();
      hv_Exception = "Wrong value of control parameter Bold";
      throw new HalconException(hv_Exception);
    }
    if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Style = hv_Style+"Italic";
      hv_Style.Dispose();
      hv_Style = ExpTmpLocalVar_Style;
      }
      }
    }
    else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
    {
      hv_Exception.Dispose();
      hv_Exception = "Wrong value of control parameter Slant";
      throw new HalconException(hv_Exception);
    }
    if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
    {
      hv_Style.Dispose();
      hv_Style = "Normal";
    }
    hv_AvailableFonts.Dispose();
    HOperatorSet.QueryFont(hv_WindowHandle, out hv_AvailableFonts);
    hv_Font_COPY_INP_TMP.Dispose();
    hv_Font_COPY_INP_TMP = "";
    for (hv_Fdx=0; (int)hv_Fdx<=(int)((new HTuple(hv_Fonts.TupleLength()))-1); hv_Fdx = (int)hv_Fdx + 1)
    {
      hv_Indices.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Indices = hv_AvailableFonts.TupleFind(
          hv_Fonts.TupleSelect(hv_Fdx));
      }
      if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
        {
          hv_Font_COPY_INP_TMP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(
              hv_Fdx);
          }
          break;
        }
      }
    }
    if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
    {
      throw new HalconException("Wrong value of control parameter Font");
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_Font = (((hv_Font_COPY_INP_TMP+"-")+hv_Style)+"-")+hv_Size_COPY_INP_TMP;
    hv_Font_COPY_INP_TMP.Dispose();
    hv_Font_COPY_INP_TMP = ExpTmpLocalVar_Font;
    }
    }
    HOperatorSet.SetFont(hv_WindowHandle, hv_Font_COPY_INP_TMP);

    hv_Font_COPY_INP_TMP.Dispose();
    hv_Size_COPY_INP_TMP.Dispose();
    hv_OS.Dispose();
    hv_Fonts.Dispose();
    hv_Style.Dispose();
    hv_Exception.Dispose();
    hv_AvailableFonts.Dispose();
    hv_Fdx.Dispose();
    hv_Indices.Dispose();

    return;
  }

}

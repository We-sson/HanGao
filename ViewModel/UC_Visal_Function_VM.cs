using PropertyChanged;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using HanGao.View.FrameShow;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Messaging;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.ComponentModel;
using System;
using System.Reflection;
using static HanGao.ViewModel.Messenger_Eunm.Messenger_Name;
using static Soceket_Connect.Socket_Connect;
using HalconDotNet;

namespace HanGao.ViewModel
{
    [AddINotifyPropertyChangedInterface]
    public  class UC_Visal_Function_VM : ObservableRecipient
    {






        /// <summary>
        /// 加载属性水槽类型
        /// </summary>
        public ICommand User_Comm
        {
            get => new RelayCommand<Vision>((Sm) =>
            {
                FrameworkElement e = Sm as FrameworkElement;
                // Local iconic variables 

                HObject ho_Image;
                HTuple hv_WindowHandle = null;


          

                // Local control variables 
                Sm.H_SWindow.HKeepAspectRatio = true;
                HTuple hv_ImageFiles = new HTuple(), hv_Index = new HTuple();
                // Initialize local and output iconic variables 
                HOperatorSet.GenEmptyObj(out ho_Image);
                hv_WindowHandle = new HTuple(Sm.H_SWindow.HalconWindow);
                //HOperatorSet.OpenWindow(0, 0, Sm.H_Window.Width, Sm.H_Window.Height, Sm.H_Window.HalconWindow, "", "", out hv_WindowHandle);
                //Image Acquisition 01: Code generated by Image Acquisition 01
                hv_ImageFiles.Dispose();
                hv_ImageFiles = new HTuple();
                if (hv_ImageFiles == null)
                    hv_ImageFiles = new HTuple();
                hv_ImageFiles[0] = "C:/Users/zhiwei2.he/Desktop/安全光栅：STD20-06NC常闭.jpg";
                if (hv_ImageFiles == null)
                    hv_ImageFiles = new HTuple();
                hv_ImageFiles[1] = "C:/Users/zhiwei2.he/Desktop/微信图片_20220826134820.jpg";
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_ImageFiles.TupleLength()
                    )) - 1); hv_Index = (int)hv_Index + 1)
                {
                    using HDevDisposeHelper dh = new HDevDisposeHelper();
                    ho_Image.Dispose();
                    HOperatorSet.ReadImage(out ho_Image, hv_ImageFiles.TupleSelect(hv_Index));
                    //Image Acquisition 01: Do something
                    HOperatorSet.DispObj(ho_Image, hv_WindowHandle);


                }
                ho_Image.Dispose();

                //hv_ImageFiles.Dispose();
                //hv_Index.Dispose();



            });
        }

    }
}

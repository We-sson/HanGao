MODULE HG_Mes(SYSMODULE)



    RECORD Robot_Process_Name_Model
        string R_Side_7;
        string R_Side_8;
        string R_Side_9;
        string Panel_Surround_7;
        string Panel_Surround_8;
        string Panel_Surround_9;
    ENDRECORD

    RECORD HG_Mes_SocketSend_Model
        string Robot_Type;
        string Vision_Model;
        string Mes_Robot_Mode;
        string Mes_Programs_Name;
        string Robot_Process_Int;
        string Mes_Work_A_State;
        string Mes_Work_B_State;
        string Mes_Work_C_State;
        string Mes_Work_D_State;
    ENDRECORD

    RECORD HG_Mes_SocketRece_Model
        num Socket_Polling_Time;
        num IsStatus;


    ENDRECORD


    CONST Robot_Process_Name_Model Robot_Process_Name_Enum:=["R_Side_7","R_Side_8","R_Side_9","Panel_Surround_7","Panel_Surround_8","Panel_Surround_9"];

    CONST string Robot_Process_Name:="R_Side_7";
    CONST string Mes_Info_Data:="Mes_Info_Data";

    PERS num Work_A_Run_Nunber:=0;
    PERS num Work_B_Run_Nunber:=0;
    PERS num Work_C_Run_Nunber:=0;
    PERS num Work_D_Run_Nunber:=0;


    LOCAL VAR bool Q_Work_A_Stat:=FALSE;
    LOCAL VAR bool Q_Work_B_Stat:=FALSE;
    LOCAL VAR bool Q_Work_C_Stat:=FALSE;
    LOCAL VAR bool Q_Work_D_Stat:=FALSE;
    VAR bool EKRL_Connect_Stat:=FALSE;
    VAR bool EKRL_Send_Stat:=FALSE;
    VAR bool EKRL_Server_Stat:=FALSE;


    PERS bool Work_A_state:=TRUE;
    PERS bool Work_B_state:=FALSE;
    PERS bool Work_C_state:=FALSE;
    PERS bool Work_D_state:=FALSE;

    VAR num Socket_TimeOut:=5;

    VAR clock Socket_Cycle_clock;


    PROC Main()
        HG_Mes_Info_Main;
    ENDPROC



    PROC HG_Mes_Info_Main()
        HG_Mes_Info_Int;

        WHILE TRUE DO


            HG_Mes_Date_Send EKRL_Connect_Stat,EKRL_Send_Stat;


        ENDWHILE




    ENDPROC

    PROC HG_Mes_Info_Int()


        Work_A_Run_Nunber:=0;
        Work_B_Run_Nunber:=0;
        Work_C_Run_Nunber:=0;
        Work_D_Run_Nunber:=0;


        Q_Work_A_Stat:=FALSE;
        Q_Work_B_Stat:=FALSE;
        Q_Work_C_Stat:=FALSE;
        Q_Work_D_Stat:=FALSE;
        EKRL_Send_Stat:=FALSE;
        EKRL_Connect_Stat:=FALSE;


        Work_A_state:=FALSE;
        Work_B_state:=FALSE;
        Work_C_state:=FALSE;
        Work_D_state:=FALSE;



    ENDPROC

    PROC HG_Mes_Date_Send(var bool Connt_Stat,var bool Send_Stat)
        VAR socketstatus status;
        VAR num Socket_num;
        VAR num Clock_num;

        !????????
        IF Connt_Stat=FALSE THEN
            !ClkReset Socket_Cycle_clock;
            Connt_Stat:=HG_Socket_Client_Connect(Client,HG_Mes_Client_PORT\Wait_out:=false\wait_time:=Socket_TimeOut);
            IF Connt_Stat=TRUE THEN
                !ClkStart Socket_Cycle_clock;
                Send_Stat:=TRUE;
            ENDIF

        ENDIF





        !??????????????
        IF SocketGetStatus(Client)=SOCKET_CONNECTED THEN
            Socket_num:=SocketPeek(Client);
        ENDIF








        !???????????
        !Clock_num:=ClkRead(Socket_Cycle_clock);
        IF (Connt_Stat=TRUE) and (Send_Stat=TRUE) and (SocketGetStatus(Client)=SOCKET_CONNECTED) THEN
            !ClkStop Socket_Cycle_clock;
            !ClkReset Socket_Cycle_clock;
            HG_Mes_Info_Send Send_Stat;
            !WaitTime 0.3;
            ! ClkStart Socket_Cycle_clock;
        ENDIF

        !??????????????
        IF ((Connt_Stat=TRUE) and (SocketGetStatus(Client)<>SOCKET_CONNECTED) ) OR (Send_Stat=FALSE) THEN
            HG_Socket_Close Client;
            Connt_Stat:=FALSE;
            Send_Stat:=FALSE;
            !ClkStop Socket_Cycle_clock;
            !ClkReset Socket_Cycle_clock;
        ENDIF


    ERROR
        !??????????????
        IF ERRNO=ERR_SOCK_CLOSED THEN
            HG_Socket_Close Client;
            Connt_Stat:=FALSE;
            Send_Stat:=FALSE;
            ! ClkStop Socket_Cycle_clock;
            ! ClkReset Socket_Cycle_clock;

            RETURN ;
        ENDIF



    ENDPROC


    PROC HG_Mes_Info_Send(var bool Send_Stat)
        VAR HG_Mes_SocketSend_Model HG_Mes_SocketSend;
        VAR HG_Mes_SocketRece_Model HG_Mes_SocketRece;
        VAR num No;
        VAR string aa;

        HG_Mes_SocketRece.IsStatus:=0;
        No:=0;

        HG_Mes_SocketSend.Robot_Type:="ABB";

        HG_Mes_SocketSend.Vision_Model:=Mes_Info_Data;

        HG_Mes_SocketSend.Mes_Programs_Name:=GetTaskName(\MecTaskNo:=No);



        IF Robot_Error=1 THEN
            HG_Mes_SocketSend.Mes_Robot_Mode:="Error";




        ELSE
            No:=RunMode();
           
            IF Robot_Run=1 and OpMode()=OP_AUTO THEN
                HG_Mes_SocketSend.Mes_Robot_Mode:="Run";
            ELSE

                HG_Mes_SocketSend.Mes_Robot_Mode:="T1";
            ENDIF



        ENDIF
        aa:=ValToStr(TRUE);


        HG_Mes_SocketSend.Mes_Work_A_State:=ValToStr(Work_A_state);
        HG_Mes_SocketSend.Mes_Work_B_State:=ValToStr(Work_B_state);
        HG_Mes_SocketSend.Mes_Work_C_State:=ValToStr(Work_C_state);
        HG_Mes_SocketSend.Mes_Work_D_State:=ValToStr(Work_D_state);

        HG_Mes_SocketSend.Robot_Process_Int:=Robot_Process_Name;


        !Send Data
        Mes_Socket_Info_Send Client,HG_Mes_SocketSend;

        Mes_Socket_Info_Receive Client,HG_Mes_SocketRece\Wait_Time:=Socket_TimeOut;


        IF HG_Mes_SocketRece.IsStatus=1 THEN
            Send_Stat:=TRUE;
        ELSE
            Send_Stat:=false;


        ENDIF






    ERROR

        IF ERRNO=ERR_SOCK_TIMEOUT THEN
            TPWrite "upack msg from sensor socket timeout, timeout time is: "+ValToStr(Socket_TimeOut);

        ELSEIF ERRNO=ERR_SOCK_CLOSED THEN
            TPWrite "upack msg from sensor socket closed";
        ELSE
            TPWrite "upack msg from sensor socket unknow";
        ENDIF


        Send_Stat:=false;
        RETURN ;






    ENDPROC



ENDMODULE

MODULE HG_Mes(SYSMODULE)



    RECORD Robot_Process_Name_Model
        string R_Side_7;
        string R_Side_8;
        string R_Side_9;
        string Panel_Surround_7;
        string Panel_Surround_8;
        string Panel_Surround_9;
    ENDRECORD

    RECORD HG_Mes_SocketSend_Model
        string Robot_Type;
        string Vision_Model;
        string Mes_Robot_Mode;
        bool Mes_Work_A_State;
        bool Mes_Work_B_State;
        bool Mes_Work_C_State;
        bool Mes_Work_D_State;
        string Robot_Process_Name;
    ENDRECORD




    CONST Robot_Process_Name_Model Robot_Process_Name_Enum:=["R_Side_7","R_Side_8","R_Side_9","Panel_Surround_7","Panel_Surround_8","Panel_Surround_9"];

    CONST string Robot_Process_Name:="R_Side_7";
    CONST string Mes_Info_Data:="Mes_Info_Data";

    PERS num Work_A_Run_Nunber:=0;
    PERS num Work_B_Run_Nunber:=0;
    PERS num Work_C_Run_Nunber:=0;
    PERS num Work_D_Run_Nunber:=0;


    LOCAL VAR bool Q_Work_A_Stat:=FALSE;
    LOCAL VAR bool Q_Work_B_Stat:=FALSE;
    LOCAL VAR bool Q_Work_C_Stat:=FALSE;
    LOCAL VAR bool Q_Work_D_Stat:=FALSE;
    LOCAL VAR bool EKRL_Send_Stat:=FALSE;
    LOCAL VAR bool EKRL_Server_Stat:=FALSE;


    PERS bool Work_A_state:=FALSE;
    PERS bool Work_B_state:=FALSE;
    PERS bool Work_C_state:=FALSE;
    PERS bool Work_D_state:=FALSE;

    VAR num Socket_Cycle_Time:=500;

    VAR clock Socket_Cycle_clock;

    PROC HG_Mes_Info_Main()
        HG_Mes_Info_Int;

        WHILE TRUE DO


            HG_Mes_Send EKRL_Send_Stat;


        ENDWHILE




    ENDPROC

    PROC HG_Mes_Info_Int()


        Work_A_Run_Nunber:=0;
        Work_B_Run_Nunber:=0;
        Work_C_Run_Nunber:=0;
        Work_D_Run_Nunber:=0;


        Q_Work_A_Stat:=FALSE;
        Q_Work_B_Stat:=FALSE;
        Q_Work_C_Stat:=FALSE;
        Q_Work_D_Stat:=FALSE;
        EKRL_Send_Stat:=FALSE;
        EKRL_Server_Stat:=FALSE;


        Work_A_state:=FALSE;
        Work_B_state:=FALSE;
        Work_C_state:=FALSE;
        Work_D_state:=FALSE;



    ENDPROC

    PROC HG_Mes_Send(inout bool EKRL_Connt_Stat)
        VAR socketstatus status;
        VAR num Socket_num;


        !????????
        IF EKRL_Connt_Stat=FALSE THEN
            ClkReset Socket_Cycle_clock;
            EKRL_Connt_Stat:=HG_Socket_Client_Connect(Client,HG_Mes_Client_PORT\wait_time:=1);
            IF EKRL_Connt_Stat=TRUE THEN
                ClkStart Socket_Cycle_clock;
            ENDIF

        ENDIF





        !??????????????
        IF SocketGetStatus(Client)=SOCKET_CONNECTED THEN
            Socket_num:=SocketPeek(Client);
        ENDIF






        !??????????????
        IF EKRL_Connt_Stat=TRUE and SocketGetStatus(Client)<>SOCKET_CONNECTED THEN
            HG_Socket_Close Client;
            EKRL_Connt_Stat:=FALSE;
            ClkStop Socket_Cycle_clock;
            ClkReset Socket_Cycle_clock;
        ENDIF

        !???????????
        IF EKRL_Connt_Stat=TRUE and ClkRead(Socket_Cycle_clock)>=Socket_Cycle_Time and SocketGetStatus(Client)<>SOCKET_CONNECTED THEN
            ClkStop Socket_Cycle_clock;
            ClkReset Socket_Cycle_clock;


        ENDIF




    ERROR
        !??????????????
        IF ERRNO=ERR_SOCK_CLOSED THEN
            HG_Socket_Close Client;
            EKRL_Connt_Stat:=FALSE;
            ClkStop Socket_Cycle_clock;
            ClkReset Socket_Cycle_clock;

            RETURN ;
        ENDIF



    ENDPROC


ENDMODULE

MODULE Glode_HanGao(SYSMODULE)




    RECORD HPoint
        num x;
        num y;
        num z;
        num Rx;
        num Ry;
        num Rz;
    ENDRECORD

    RECORD HandEye_Calib_Send_Model
        num Vision_Model;
        num Calibration_Model;
        HPoint ACT_Point;
    ENDRECORD

    RECORD HandEye_Calib_Receive_Model
        string Message_Error;
        num IsStatus;
        HPoint Calib_Point;
    ENDRECORD


    RECORD Creation_Model_Send_Model
        num Vision_Model;
        num Creation_Model;
        HPoint ACT_Point;
    ENDRECORD

    RECORD Creation_Model_Receive_Model
        string Message_Error;
        num IsStatus;
        HPoint Creation_Point;
    ENDRECORD


    !HandEye_Calib_Model
    CONST string HE_Calib_Start_Model:="Calibration_Start";
    CONST string HE_Calib_Progress_Model:="Calibration_Progress";
    CONST string HE_Calib_End_Model:="Calibration_End";


    CONST string HE_Creation_CameraPos_Model:="Creation_CameraPos";
    CONST string HE_Creation_OriginPos_Model:="Creation_OriginPos";



    PROC HTWrite(string Message)

        IF DegLog THEN
            TPWrite Message;
        ENDIF

    ENDPROC





    PROC HG_Creation_Model(string Model)
        VAR Creation_Model_Send_Model Creation_Model_Send;
        var Creation_Model_Receive_Model Creation_Model_Receive;
        VAR robtarget ACT_Point;
        VAR robtarget Model_Pos;

        !Vision function code
        Creation_Model_Send.Vision_Model:=6;

        TEST Model
        CASE HE_Creation_CameraPos_Model:
            Creation_Model_Send.Creation_Model:=0;

        CASE HE_Creation_OriginPos_Model:
            Creation_Model_Send.Creation_Model:=1;
        DEFAULT:
            TPWrite "Model:="+Model+" , Creation Val Error! ";
            Stop;
            EXIT;
        ENDTEST

        ACT_Point:=cRobT();

        Creation_Model_Send.ACT_Point.X:=ACT_Point.trans.x;
        Creation_Model_Send.ACT_Point.Y:=ACT_Point.trans.y;
        Creation_Model_Send.ACT_Point.Z:=ACT_Point.trans.z;
        Creation_Model_Send.ACT_Point.Rx:=EulerZYX(\X,ACT_Point.rot);
        Creation_Model_Send.ACT_Point.Ry:=EulerZYX(\Y,ACT_Point.rot);
        Creation_Model_Send.ACT_Point.Rz:=EulerZYX(\Z,ACT_Point.rot);

        !show pos
        HTWrite(ValToStr(Creation_Model_Send.ACT_Point));

        HG_Socket_Client_Connect Client,\wait_time:=2000;
        HG_Creation_Model_Socket_Send Client,Creation_Model_Send;
        HG_Creation_Model_Socket_Receive Client,Creation_Model_Receive;
        HG_Socket_Close Client;

        IF Creation_Model_Receive.IsStatus=1 THEN



        ENDIF

        HTWrite Creation_Model_Receive.Message_Error;


    ERROR
        !Error Handling
        HG_Socket_Close Client;
        RAISE ;
    ENDPROC

    PROC HG_HandEye_Calib(string Model,\INOUT robtarget Calib_Pos)

        VAR HandEye_Calib_Send_Model HandEye_Send;
        var HandEye_Calib_Receive_Model Hand_Recevice;
        VAR pose ACTPos;
        VAR robtarget ACT_Point;
        VAR num Rx;
        VAR num Ry;
        VAR num Rz;
        VAR string Rece_Str;
        VAR HandEye_Calib_Receive_Model Receive_Results;



        HandEye_Send.Vision_Model:=5;

        !Model set
        TEST Model
        CASE HE_Calib_Start_Model:
            HandEye_Send.Calibration_Model:=0;

        CASE HE_Calib_Progress_Model:
            HandEye_Send.Calibration_Model:=1;
            ACT_Point:=cRobT();

            HandEye_Send.ACT_Point.X:=ACT_Point.trans.x;
            HandEye_Send.ACT_Point.Y:=ACT_Point.trans.y;
            HandEye_Send.ACT_Point.Z:=ACT_Point.trans.z;
            HandEye_Send.ACT_Point.Rx:=EulerZYX(\X,ACT_Point.rot);
            HandEye_Send.ACT_Point.Ry:=EulerZYX(\Y,ACT_Point.rot);
            HandEye_Send.ACT_Point.Rz:=EulerZYX(\Z,ACT_Point.rot);
        CASE HE_Calib_End_Model:
            HandEye_Send.Calibration_Model:=2;


        DEFAULT:
            TPWrite "Model:="+Model+" , Calibtion Val Error! ";
            Stop;
            EXIT;

        ENDTEST
        !Get NowPose


        !show pos
        HTWrite(ValToStr(HandEye_Send.ACT_Point));

        !PC communication link

        HG_Socket_Client_Connect Client,\wait_time:=2000;
        HG_HE_Calib_Socket_Send Client,HandEye_Send;
        HG_HE_Calib_Socket_Receive Client,Hand_Recevice;
        HG_Socket_Close Client;

        IF Hand_Recevice.IsStatus=1 THEN

            TEST Model
            CASE HE_Calib_Start_Model:

                !**********

            CASE HE_Calib_Progress_Model:

                !**********

            CASE HE_Calib_End_Model:

                Stop\NoRegain;
                Calib_Pos.trans.x:=Hand_Recevice.Calib_Point.x;
                Calib_Pos.trans.y:=Hand_Recevice.Calib_Point.y;
                Calib_Pos.trans.z:=Hand_Recevice.Calib_Point.z;


            ENDTEST

            HTWrite Hand_Recevice.Message_Error;


        ENDIF

    ERROR
        !Error Handling
        HG_Socket_Close Client;
        RAISE ;
    ENDPROC

    FUNC HandEye_Calib_Receive_Model HG_Receive_ToModel(byte Receive_Byte)
        VAR HandEye_Calib_Receive_Model Receive_Model;
        VAR string Receice_str;

        Receice_str:=ByteToStr(Receive_Byte);
        HTWrite Receice_str;

        RETURN Receive_Model;
    ENDFUNC

ENDMODULE